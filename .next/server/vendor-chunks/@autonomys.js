"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@autonomys";
exports.ids = ["vendor-chunks/@autonomys"];
exports.modules = {

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/address.js":
/*!************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/address.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/address.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decode = exports.address = void 0;\nconst keyring_1 = __webpack_require__(/*! @polkadot/keyring */ \"(ssr)/./node_modules/@polkadot/keyring/index.js\");\nconst wallet_1 = __webpack_require__(/*! ./constants/wallet */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/wallet.js\");\n/**\n * Converts an address to the standard Autonomys Network format with SS58 encoding.\n *\n * This function standardizes addresses across the Autonomys Network by encoding them\n * using the SS58 format. It accepts both string addresses and Uint8Array representations,\n * making it flexible for various use cases.\n *\n * @param address - The address to convert. Can be a string address or Uint8Array public key.\n * @param ss58Format - The SS58 format number to use for encoding. Defaults to the mainnet format.\n * @returns The standardized address string in SS58 format.\n *\n * @example\n * import { address } from '@autonomys/auto-utils'\n *\n * // Convert a raw address to mainnet format\n * const mainnetAddress = address('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY')\n * console.log(mainnetAddress) // Output: standardized mainnet address\n *\n * // Convert using custom SS58 format\n * const customAddress = address('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY', 42)\n * console.log(customAddress) // Output: address in format 42\n *\n * // Convert from Uint8Array public key\n * const publicKey = new Uint8Array(32) // 32-byte public key\n * const addressFromPubKey = address(publicKey)\n * console.log(addressFromPubKey) // Output: standardized address\n *\n * @throws {Error} When the input address is invalid or cannot be encoded.\n */\nconst address = (address, ss58Format = wallet_1.DEFAULT_SS58_FORMAT) => (0, keyring_1.encodeAddress)(address, ss58Format);\nexports.address = address;\n/**\n * Decodes an SS58 address to its raw Uint8Array representation.\n *\n * This function extracts the underlying public key bytes from an SS58-encoded address.\n * It's useful when you need to work with the raw address data for cryptographic operations\n * or when interfacing with lower-level blockchain functions.\n *\n * @param address - The SS58-encoded address string to decode.\n * @returns The decoded address as a Uint8Array (32 bytes for most address types).\n *\n * @example\n * import { decode } from '@autonomys/auto-utils'\n *\n * // Decode a mainnet address\n * const addressString = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'\n * const publicKeyBytes = decode(addressString)\n * console.log(publicKeyBytes) // Output: Uint8Array(32) [...]\n * console.log(publicKeyBytes.length) // Output: 32\n *\n * // Use decoded bytes for cryptographic operations\n * const decoded = decode('5GmS1wtCfR4tK5SSgnZbVT4kYw5W8NmxmijcsxCQE6oLW6A8')\n * // decoded can now be used with other crypto functions\n *\n * @throws {Error} When the address is invalid, malformed, or has an incorrect checksum.\n */\nconst decode = (address) => (0, keyring_1.decodeAddress)(address);\nexports.decode = decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxlQUFlO0FBQ2hDLGtCQUFrQixtQkFBTyxDQUFDLDBFQUFtQjtBQUM3QyxpQkFBaUIsbUJBQU8sQ0FBQywrRkFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L2FkZHJlc3MuanM/ZGM5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIGZpbGU6IHNyYy9hZGRyZXNzLnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMuYWRkcmVzcyA9IHZvaWQgMDtcbmNvbnN0IGtleXJpbmdfMSA9IHJlcXVpcmUoXCJAcG9sa2Fkb3Qva2V5cmluZ1wiKTtcbmNvbnN0IHdhbGxldF8xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzL3dhbGxldFwiKTtcbi8qKlxuICogQ29udmVydHMgYW4gYWRkcmVzcyB0byB0aGUgc3RhbmRhcmQgQXV0b25vbXlzIE5ldHdvcmsgZm9ybWF0IHdpdGggU1M1OCBlbmNvZGluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHN0YW5kYXJkaXplcyBhZGRyZXNzZXMgYWNyb3NzIHRoZSBBdXRvbm9teXMgTmV0d29yayBieSBlbmNvZGluZyB0aGVtXG4gKiB1c2luZyB0aGUgU1M1OCBmb3JtYXQuIEl0IGFjY2VwdHMgYm90aCBzdHJpbmcgYWRkcmVzc2VzIGFuZCBVaW50OEFycmF5IHJlcHJlc2VudGF0aW9ucyxcbiAqIG1ha2luZyBpdCBmbGV4aWJsZSBmb3IgdmFyaW91cyB1c2UgY2FzZXMuXG4gKlxuICogQHBhcmFtIGFkZHJlc3MgLSBUaGUgYWRkcmVzcyB0byBjb252ZXJ0LiBDYW4gYmUgYSBzdHJpbmcgYWRkcmVzcyBvciBVaW50OEFycmF5IHB1YmxpYyBrZXkuXG4gKiBAcGFyYW0gc3M1OEZvcm1hdCAtIFRoZSBTUzU4IGZvcm1hdCBudW1iZXIgdG8gdXNlIGZvciBlbmNvZGluZy4gRGVmYXVsdHMgdG8gdGhlIG1haW5uZXQgZm9ybWF0LlxuICogQHJldHVybnMgVGhlIHN0YW5kYXJkaXplZCBhZGRyZXNzIHN0cmluZyBpbiBTUzU4IGZvcm1hdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgYWRkcmVzcyB9IGZyb20gJ0BhdXRvbm9teXMvYXV0by11dGlscydcbiAqXG4gKiAvLyBDb252ZXJ0IGEgcmF3IGFkZHJlc3MgdG8gbWFpbm5ldCBmb3JtYXRcbiAqIGNvbnN0IG1haW5uZXRBZGRyZXNzID0gYWRkcmVzcygnNUdyd3ZhRUY1elhiMjZGejlyY1FwRFdTNTdDdEVSSHBOZWhYQ1BjTm9IR0t1dFFZJylcbiAqIGNvbnNvbGUubG9nKG1haW5uZXRBZGRyZXNzKSAvLyBPdXRwdXQ6IHN0YW5kYXJkaXplZCBtYWlubmV0IGFkZHJlc3NcbiAqXG4gKiAvLyBDb252ZXJ0IHVzaW5nIGN1c3RvbSBTUzU4IGZvcm1hdFxuICogY29uc3QgY3VzdG9tQWRkcmVzcyA9IGFkZHJlc3MoJzVHcnd2YUVGNXpYYjI2Rno5cmNRcERXUzU3Q3RFUkhwTmVoWENQY05vSEdLdXRRWScsIDQyKVxuICogY29uc29sZS5sb2coY3VzdG9tQWRkcmVzcykgLy8gT3V0cHV0OiBhZGRyZXNzIGluIGZvcm1hdCA0MlxuICpcbiAqIC8vIENvbnZlcnQgZnJvbSBVaW50OEFycmF5IHB1YmxpYyBrZXlcbiAqIGNvbnN0IHB1YmxpY0tleSA9IG5ldyBVaW50OEFycmF5KDMyKSAvLyAzMi1ieXRlIHB1YmxpYyBrZXlcbiAqIGNvbnN0IGFkZHJlc3NGcm9tUHViS2V5ID0gYWRkcmVzcyhwdWJsaWNLZXkpXG4gKiBjb25zb2xlLmxvZyhhZGRyZXNzRnJvbVB1YktleSkgLy8gT3V0cHV0OiBzdGFuZGFyZGl6ZWQgYWRkcmVzc1xuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBXaGVuIHRoZSBpbnB1dCBhZGRyZXNzIGlzIGludmFsaWQgb3IgY2Fubm90IGJlIGVuY29kZWQuXG4gKi9cbmNvbnN0IGFkZHJlc3MgPSAoYWRkcmVzcywgc3M1OEZvcm1hdCA9IHdhbGxldF8xLkRFRkFVTFRfU1M1OF9GT1JNQVQpID0+ICgwLCBrZXlyaW5nXzEuZW5jb2RlQWRkcmVzcykoYWRkcmVzcywgc3M1OEZvcm1hdCk7XG5leHBvcnRzLmFkZHJlc3MgPSBhZGRyZXNzO1xuLyoqXG4gKiBEZWNvZGVzIGFuIFNTNTggYWRkcmVzcyB0byBpdHMgcmF3IFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBleHRyYWN0cyB0aGUgdW5kZXJseWluZyBwdWJsaWMga2V5IGJ5dGVzIGZyb20gYW4gU1M1OC1lbmNvZGVkIGFkZHJlc3MuXG4gKiBJdCdzIHVzZWZ1bCB3aGVuIHlvdSBuZWVkIHRvIHdvcmsgd2l0aCB0aGUgcmF3IGFkZHJlc3MgZGF0YSBmb3IgY3J5cHRvZ3JhcGhpYyBvcGVyYXRpb25zXG4gKiBvciB3aGVuIGludGVyZmFjaW5nIHdpdGggbG93ZXItbGV2ZWwgYmxvY2tjaGFpbiBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIGFkZHJlc3MgLSBUaGUgU1M1OC1lbmNvZGVkIGFkZHJlc3Mgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIGFkZHJlc3MgYXMgYSBVaW50OEFycmF5ICgzMiBieXRlcyBmb3IgbW9zdCBhZGRyZXNzIHR5cGVzKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSAnQGF1dG9ub215cy9hdXRvLXV0aWxzJ1xuICpcbiAqIC8vIERlY29kZSBhIG1haW5uZXQgYWRkcmVzc1xuICogY29uc3QgYWRkcmVzc1N0cmluZyA9ICc1R3J3dmFFRjV6WGIyNkZ6OXJjUXBEV1M1N0N0RVJIcE5laFhDUGNOb0hHS3V0UVknXG4gKiBjb25zdCBwdWJsaWNLZXlCeXRlcyA9IGRlY29kZShhZGRyZXNzU3RyaW5nKVxuICogY29uc29sZS5sb2cocHVibGljS2V5Qnl0ZXMpIC8vIE91dHB1dDogVWludDhBcnJheSgzMikgWy4uLl1cbiAqIGNvbnNvbGUubG9nKHB1YmxpY0tleUJ5dGVzLmxlbmd0aCkgLy8gT3V0cHV0OiAzMlxuICpcbiAqIC8vIFVzZSBkZWNvZGVkIGJ5dGVzIGZvciBjcnlwdG9ncmFwaGljIG9wZXJhdGlvbnNcbiAqIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUoJzVHbVMxd3RDZlI0dEs1U1NnblpiVlQ0a1l3NVc4Tm14bWlqY3N4Q1FFNm9MVzZBOCcpXG4gKiAvLyBkZWNvZGVkIGNhbiBub3cgYmUgdXNlZCB3aXRoIG90aGVyIGNyeXB0byBmdW5jdGlvbnNcbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gV2hlbiB0aGUgYWRkcmVzcyBpcyBpbnZhbGlkLCBtYWxmb3JtZWQsIG9yIGhhcyBhbiBpbmNvcnJlY3QgY2hlY2tzdW0uXG4gKi9cbmNvbnN0IGRlY29kZSA9IChhZGRyZXNzKSA9PiAoMCwga2V5cmluZ18xLmRlY29kZUFkZHJlc3MpKGFkZHJlc3MpO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/api.js":
/*!********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/api.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.disconnect = exports.activateDomain = exports.activate = exports.createConnection = void 0;\nconst api_1 = __webpack_require__(/*! @polkadot/api */ \"(ssr)/./node_modules/@polkadot/api/index.js\");\nconst network_1 = __webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/network.js\");\nconst network_2 = __webpack_require__(/*! ./types/network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/network.js\");\n/**\n * Creates a connection to a Polkadot.js API instance with WebSocket provider.\n *\n * This function establishes a WebSocket connection to the Autonomys Network or domain\n * and returns a fully initialized ApiPromise instance. It automatically includes\n * the necessary chain types and waits for the API to be ready before returning.\n *\n * @param endpoint - The WebSocket endpoint URL(s) to connect to. Can be a single URL or array of URLs.\n * @param options - Optional configuration for the API instance.\n * @returns A Promise that resolves to an initialized ApiPromise instance.\n *\n * @example\n * import { createConnection } from '@autonomys/auto-utils'\n *\n * // Connect to single endpoint\n * const api = await createConnection('wss://rpc-0.taurus.autonomys.xyz/ws')\n * console.log('Connected to API')\n *\n * // Connect with multiple endpoints for failover\n * const endpoints = [\n *   'wss://rpc-0.taurus.autonomys.xyz/ws',\n *   'wss://rpc-1.taurus.autonomys.xyz/ws'\n * ]\n * const apiWithFailover = await createConnection(endpoints)\n *\n * // Connect with custom options\n * const customApi = await createConnection(\n *   'wss://rpc-0.taurus.autonomys.xyz/ws',\n *   {\n *     noInitWarn: false,\n *     types: { CustomType: 'u32' }\n *   }\n * )\n *\n * // Always disconnect when done\n * await api.disconnect()\n *\n * @throws {Error} When connection fails or API initialization fails.\n */\nconst createConnection = (endpoint, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    // Create the provider\n    const provider = new api_1.WsProvider(endpoint);\n    // Create the API instance\n    const api = yield api_1.ApiPromise.create(Object.assign(Object.assign({}, options), { types: Object.assign(Object.assign({}, network_2.CHAIN_TYPES), options === null || options === void 0 ? void 0 : options.types), noInitWarn: (_a = options === null || options === void 0 ? void 0 : options.noInitWarn) !== null && _a !== void 0 ? _a : true, provider }));\n    yield api.isReady;\n    return api;\n});\nexports.createConnection = createConnection;\n/**\n * Activates a connection to the Autonomys Network consensus layer.\n *\n * This function simplifies connecting to the Autonomys Network by automatically\n * resolving the network RPC URLs and establishing a connection. It supports all\n * available networks including mainnet, testnet, and local development networks.\n *\n * @param params - Optional network activation parameters including networkId and API options.\n * @returns A Promise that resolves to an initialized ApiPromise instance for the consensus layer.\n *\n * @example\n * import { activate } from '@autonomys/auto-utils'\n *\n * // Connect to default network (mainnet)\n * const api = await activate()\n * console.log('Connected to mainnet')\n *\n * // Connect to specific network\n * const taurusApi = await activate({ networkId: 'taurus' })\n * console.log('Connected to Taurus testnet')\n *\n * // Connect to local development network\n * const localApi = await activate({ networkId: 'localhost' })\n * console.log('Connected to localhost')\n *\n * // Connect with custom API options\n * const customApi = await activate({\n *   networkId: 'mainnet',\n *   noInitWarn: false,\n *   types: { CustomType: 'u64' }\n * })\n *\n * // Always disconnect when done\n * await api.disconnect()\n *\n * @throws {Error} When the specified network is not found or connection fails.\n */\nconst activate = (params) => __awaiter(void 0, void 0, void 0, function* () {\n    // Get the first rpc urls for the network\n    const endpoint = (0, network_1.getNetworkRpcUrls)(params);\n    // Remove the networkId from the input\n    if (params)\n        delete params.networkId;\n    return yield (0, exports.createConnection)(endpoint, params);\n});\nexports.activate = activate;\n/**\n * Activates a connection to a specific domain within the Autonomys Network.\n *\n * This function connects to domain-specific networks like Auto-EVM or Auto-ID\n * which run as domains on top of the Autonomys consensus layer. Each domain\n * has its own RPC endpoints and may have domain-specific functionality.\n *\n * @param params - Domain activation parameters including networkId, domainId, and API options.\n * @returns A Promise that resolves to an initialized ApiPromise instance for the specified domain.\n *\n * @example\n * import { activateDomain } from '@autonomys/auto-utils'\n *\n * // Connect to Auto-EVM domain on Mainnet testnet\n * const evmApi = await activateDomain({\n *   networkId: 'mainnet',\n *   domainId: '0'\n * })\n * console.log('Connected to Auto-EVM domain')\n *\n * // Connect to Auto-EVM domain on Mainnet\n * const autoEvmApi = await activateDomain({\n *   networkId: 'mainnet',\n *   domainId: '0'\n * })\n * console.log('Connected to Auto-EVM domain')\n *\n * // Connect to localhost domain for development\n * const localDomainApi = await activateDomain({\n *   networkId: 'localhost',\n *   domainId: '0'\n * })\n *\n * // Connect with custom API options\n * const customDomainApi = await activateDomain({\n *   networkId: 'mainnet',\n *   domainId: '0',\n *   noInitWarn: false\n * })\n *\n * // Always disconnect when done\n * await evmApi.disconnect()\n *\n * @throws {Error} When the specified network or domain is not found, or connection fails.\n */\nconst activateDomain = (params) => __awaiter(void 0, void 0, void 0, function* () {\n    // Get the first rpc urls for the network\n    const endpoint = (0, network_1.getNetworkDomainRpcUrls)(params);\n    // Remove the domainId from the input\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { domainId } = params, rest = __rest(params, [\"domainId\"]);\n    return yield (0, exports.createConnection)(endpoint, rest);\n});\nexports.activateDomain = activateDomain;\n/**\n * Disconnects an active API connection and cleans up resources.\n *\n * This function properly closes the WebSocket connection and cleans up any\n * resources associated with the API instance. It should always be called\n * when you're done using an API connection to prevent resource leaks.\n *\n * @param api - The ApiPromise instance to disconnect.\n * @returns A Promise that resolves when the disconnection is complete.\n *\n * @example\n * import { activate, disconnect } from '@autonomys/auto-utils'\n *\n * // Connect and then disconnect\n * const api = await activate({ networkId: 'taurus' })\n *\n * // Use the API for operations...\n * const chainInfo = await api.rpc.system.chain()\n * console.log('Chain:', chainInfo.toString())\n *\n * // Always disconnect when done\n * await disconnect(api)\n * console.log('API disconnected')\n *\n * // Or use the API instance method directly\n * // await api.disconnect()\n */\nconst disconnect = (api) => __awaiter(void 0, void 0, void 0, function* () {\n    // Disconnect the API instance and the provider\n    yield api.disconnect();\n});\nexports.disconnect = disconnect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/domain.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/domain.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/constants/domain.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.domains = exports.DomainRuntime = void 0;\nvar DomainRuntime;\n(function (DomainRuntime) {\n    DomainRuntime[\"AUTO_ID\"] = \"auto-id\";\n    DomainRuntime[\"AUTO_EVM\"] = \"auto-evm\";\n})(DomainRuntime || (exports.DomainRuntime = DomainRuntime = {}));\nexports.domains = {\n    [DomainRuntime.AUTO_EVM]: {\n        runtime: DomainRuntime.AUTO_EVM,\n        name: 'Auto-EVM',\n    },\n    [DomainRuntime.AUTO_ID]: {\n        runtime: DomainRuntime.AUTO_ID,\n        name: 'Auto-ID',\n    },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL2RvbWFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsR0FBRyxxQkFBcUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQixxQkFBcUIscUJBQXFCO0FBQy9ELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC9jb25zdGFudHMvZG9tYWluLmpzPzEzZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBmaWxlOiBzcmMvY29uc3RhbnRzL2RvbWFpbi50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kb21haW5zID0gZXhwb3J0cy5Eb21haW5SdW50aW1lID0gdm9pZCAwO1xudmFyIERvbWFpblJ1bnRpbWU7XG4oZnVuY3Rpb24gKERvbWFpblJ1bnRpbWUpIHtcbiAgICBEb21haW5SdW50aW1lW1wiQVVUT19JRFwiXSA9IFwiYXV0by1pZFwiO1xuICAgIERvbWFpblJ1bnRpbWVbXCJBVVRPX0VWTVwiXSA9IFwiYXV0by1ldm1cIjtcbn0pKERvbWFpblJ1bnRpbWUgfHwgKGV4cG9ydHMuRG9tYWluUnVudGltZSA9IERvbWFpblJ1bnRpbWUgPSB7fSkpO1xuZXhwb3J0cy5kb21haW5zID0ge1xuICAgIFtEb21haW5SdW50aW1lLkFVVE9fRVZNXToge1xuICAgICAgICBydW50aW1lOiBEb21haW5SdW50aW1lLkFVVE9fRVZNLFxuICAgICAgICBuYW1lOiAnQXV0by1FVk0nLFxuICAgIH0sXG4gICAgW0RvbWFpblJ1bnRpbWUuQVVUT19JRF06IHtcbiAgICAgICAgcnVudGltZTogRG9tYWluUnVudGltZS5BVVRPX0lELFxuICAgICAgICBuYW1lOiAnQXV0by1JRCcsXG4gICAgfSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/domain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// file: src/constants/index.ts\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./domain */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/domain.js\"), exports);\n__exportStar(__webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/network.js\"), exports);\n__exportStar(__webpack_require__(/*! ./number */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/number.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/token.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/wallet.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHFGQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyx1RkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMscUZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLG1GQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxxRkFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL2luZGV4LmpzPzhmZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBmaWxlOiBzcmMvY29uc3RhbnRzL2luZGV4LnRzXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kb21haW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25ldHdvcmtcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL251bWJlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdG9rZW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldFwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/network.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/network.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/constants/network.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultNetwork = exports.networks = exports.SUBSCAN_EXPLORER = exports.ASTRAL_EXPLORER = exports.NetworkExplorerName = exports.NetworkName = exports.NetworkId = void 0;\nconst domain_1 = __webpack_require__(/*! ./domain */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/domain.js\");\nconst token_1 = __webpack_require__(/*! ./token */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/token.js\");\nvar NetworkId;\n(function (NetworkId) {\n    NetworkId[\"MAINNET\"] = \"mainnet\";\n    NetworkId[\"TAURUS\"] = \"taurus\";\n    NetworkId[\"DEVNET\"] = \"devnet\";\n    NetworkId[\"LOCALHOST\"] = \"localhost\";\n})(NetworkId || (exports.NetworkId = NetworkId = {}));\nvar NetworkName;\n(function (NetworkName) {\n    NetworkName[\"MAINNET\"] = \"Mainnet\";\n    NetworkName[\"TAURUS\"] = \"Testnet - Taurus\";\n    NetworkName[\"DEVNET\"] = \"Devnet\";\n    NetworkName[\"LOCALHOST\"] = \"Localhost\";\n})(NetworkName || (exports.NetworkName = NetworkName = {}));\nvar NetworkExplorerName;\n(function (NetworkExplorerName) {\n    NetworkExplorerName[\"ASTRAL\"] = \"Astral\";\n    NetworkExplorerName[\"SUBSCAN\"] = \"Subscan\";\n})(NetworkExplorerName || (exports.NetworkExplorerName = NetworkExplorerName = {}));\nexports.ASTRAL_EXPLORER = 'https://explorer.autonomys.xyz/';\nexports.SUBSCAN_EXPLORER = 'https://autonomys.subscan.io/';\nexports.networks = [\n    {\n        id: NetworkId.MAINNET,\n        name: NetworkName.MAINNET,\n        rpcUrls: [\n            'wss://rpc-0.mainnet.subspace.network/ws',\n            'wss://rpc-1.mainnet.subspace.network/ws',\n            'wss://rpc-0.mainnet.autonomys.xyz/ws',\n            'wss://rpc-1.mainnet.autonomys.xyz/ws',\n            'wss://rpc.mainnet.subspace.foundation/ws',\n        ],\n        explorer: [\n            {\n                name: NetworkExplorerName.ASTRAL,\n                url: exports.ASTRAL_EXPLORER,\n            },\n            {\n                name: NetworkExplorerName.SUBSCAN,\n                url: exports.SUBSCAN_EXPLORER,\n            },\n        ],\n        domains: [\n            Object.assign(Object.assign({ domainId: '0' }, domain_1.domains[domain_1.DomainRuntime.AUTO_EVM]), { rpcUrls: ['wss://auto-evm.mainnet.autonomys.xyz/ws'] }),\n        ],\n        token: token_1.DEFAULT_TOKEN,\n    },\n    {\n        id: NetworkId.TAURUS,\n        name: NetworkName.TAURUS,\n        rpcUrls: [\n            'wss://rpc-0.taurus.autonomys.xyz/ws',\n            'wss://rpc-1.taurus.autonomys.xyz/ws',\n            'wss://rpc-0.taurus.subspace.network/ws',\n            'wss://rpc-1.taurus.subspace.network/ws',\n        ],\n        explorer: [\n            {\n                name: NetworkExplorerName.ASTRAL,\n                url: exports.ASTRAL_EXPLORER + 'taurus/consensus/',\n            },\n        ],\n        domains: [\n            Object.assign(Object.assign({ domainId: '0' }, domain_1.domains[domain_1.DomainRuntime.AUTO_EVM]), { rpcUrls: [\n                    'wss://auto-evm.taurus.autonomys.xyz/ws',\n                    'wss://auto-evm-0.taurus.autonomys.xyz/ws',\n                    'wss://auto-evm-1.taurus.autonomys.xyz/ws',\n                    'wss://auto-evm.taurus.subspace.network/ws',\n                    'wss://auto-evm-0.taurus.subspace.network/ws',\n                    'wss://auto-evm-1.taurus.subspace.network/ws',\n                ] }),\n        ],\n        token: token_1.TESTNET_TOKEN,\n        isTestnet: true,\n    },\n    {\n        id: NetworkId.DEVNET,\n        name: NetworkName.DEVNET,\n        rpcUrls: ['ws://rpc.devnet.subspace.network/ws'],\n        explorer: [\n            {\n                name: NetworkExplorerName.ASTRAL,\n                url: exports.ASTRAL_EXPLORER + '/devnet/consensus/',\n            },\n        ],\n        domains: [\n            Object.assign(Object.assign({ domainId: '0' }, domain_1.domains[domain_1.DomainRuntime.AUTO_EVM]), { rpcUrls: ['wss:///nova.devnet.subspace.network/ws'] }),\n            Object.assign(Object.assign({ domainId: '1' }, domain_1.domains[domain_1.DomainRuntime.AUTO_ID]), { rpcUrls: ['wss://autoid.devnet.subspace.network/ws'] }),\n        ],\n        token: token_1.TESTNET_TOKEN,\n        isTestnet: true,\n        isLocalhost: false,\n    },\n    {\n        id: NetworkId.LOCALHOST,\n        name: NetworkName.LOCALHOST,\n        rpcUrls: ['ws://127.0.0.1:9944/ws'],\n        explorer: [\n            {\n                name: NetworkExplorerName.ASTRAL,\n                url: exports.ASTRAL_EXPLORER + 'localhost/consensus/',\n            },\n        ],\n        domains: [\n            Object.assign(Object.assign({ domainId: '0' }, domain_1.domains[domain_1.DomainRuntime.AUTO_EVM]), { rpcUrls: ['ws://127.0.0.1:9945/ws'] }),\n            Object.assign(Object.assign({ domainId: '1' }, domain_1.domains[domain_1.DomainRuntime.AUTO_ID]), { rpcUrls: ['ws://127.0.0.1:9946/ws'] }),\n        ],\n        token: token_1.TESTNET_TOKEN,\n        isTestnet: true,\n        isLocalhost: true,\n    },\n];\nexports.defaultNetwork = exports.networks[0];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/number.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/number.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BIGINT_ZERO = void 0;\nexports.BIGINT_ZERO = BigInt(0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL251bWJlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC9jb25zdGFudHMvbnVtYmVyLmpzPzJhYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJJR0lOVF9aRVJPID0gdm9pZCAwO1xuZXhwb3J0cy5CSUdJTlRfWkVSTyA9IEJpZ0ludCgwKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/token.js":
/*!********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/token.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TESTNET_TOKEN = exports.DEFAULT_TOKEN = exports.DEFAULT_TOKEN_NAME = exports.DEFAULT_TOKEN_SYMBOL = exports.DEFAULT_TOKEN_DECIMALS = void 0;\nexports.DEFAULT_TOKEN_DECIMALS = 18;\nexports.DEFAULT_TOKEN_SYMBOL = 'AI3';\nexports.DEFAULT_TOKEN_NAME = 'Auto Token';\nexports.DEFAULT_TOKEN = {\n    decimals: exports.DEFAULT_TOKEN_DECIMALS,\n    symbol: exports.DEFAULT_TOKEN_SYMBOL,\n    name: exports.DEFAULT_TOKEN_NAME,\n};\nexports.TESTNET_TOKEN = Object.assign(Object.assign({}, exports.DEFAULT_TOKEN), { symbol: 't' + exports.DEFAULT_TOKEN_SYMBOL, name: 'Testnet ' + exports.DEFAULT_TOKEN_NAME });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL3Rva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLHFCQUFxQixHQUFHLDBCQUEwQixHQUFHLDRCQUE0QixHQUFHLDhCQUE4QjtBQUMxSSw4QkFBOEI7QUFDOUIsNEJBQTRCO0FBQzVCLDBCQUEwQjtBQUMxQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUNBQWlDLDRCQUE0QiwyRkFBMkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L2NvbnN0YW50cy90b2tlbi5qcz9kYzJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5URVNUTkVUX1RPS0VOID0gZXhwb3J0cy5ERUZBVUxUX1RPS0VOID0gZXhwb3J0cy5ERUZBVUxUX1RPS0VOX05BTUUgPSBleHBvcnRzLkRFRkFVTFRfVE9LRU5fU1lNQk9MID0gZXhwb3J0cy5ERUZBVUxUX1RPS0VOX0RFQ0lNQUxTID0gdm9pZCAwO1xuZXhwb3J0cy5ERUZBVUxUX1RPS0VOX0RFQ0lNQUxTID0gMTg7XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fU1lNQk9MID0gJ0FJMyc7XG5leHBvcnRzLkRFRkFVTFRfVE9LRU5fTkFNRSA9ICdBdXRvIFRva2VuJztcbmV4cG9ydHMuREVGQVVMVF9UT0tFTiA9IHtcbiAgICBkZWNpbWFsczogZXhwb3J0cy5ERUZBVUxUX1RPS0VOX0RFQ0lNQUxTLFxuICAgIHN5bWJvbDogZXhwb3J0cy5ERUZBVUxUX1RPS0VOX1NZTUJPTCxcbiAgICBuYW1lOiBleHBvcnRzLkRFRkFVTFRfVE9LRU5fTkFNRSxcbn07XG5leHBvcnRzLlRFU1RORVRfVE9LRU4gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4cG9ydHMuREVGQVVMVF9UT0tFTiksIHsgc3ltYm9sOiAndCcgKyBleHBvcnRzLkRFRkFVTFRfVE9LRU5fU1lNQk9MLCBuYW1lOiAnVGVzdG5ldCAnICsgZXhwb3J0cy5ERUZBVUxUX1RPS0VOX05BTUUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/wallet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/constants/wallet.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/constants/wallet.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_SS58_FORMAT = exports.MAINNET_SS58_FORMAT = exports.mockURIs = void 0;\nexports.mockURIs = [\n    '//Alice',\n    '//Bob',\n    '//Charlie',\n    '//Dave',\n    '//Eve',\n    '//Frank',\n    '//Grace',\n    '//Harry',\n    '//Ivy',\n    '//Jacob',\n];\nexports.MAINNET_SS58_FORMAT = 6094;\nexports.DEFAULT_SS58_FORMAT = exports.MAINNET_SS58_FORMAT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY29uc3RhbnRzL3dhbGxldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLGdCQUFnQjtBQUM1RSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L2NvbnN0YW50cy93YWxsZXQuanM/NDJhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIGZpbGU6IHNyYy9jb25zdGFudHMvd2FsbGV0LnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfU1M1OF9GT1JNQVQgPSBleHBvcnRzLk1BSU5ORVRfU1M1OF9GT1JNQVQgPSBleHBvcnRzLm1vY2tVUklzID0gdm9pZCAwO1xuZXhwb3J0cy5tb2NrVVJJcyA9IFtcbiAgICAnLy9BbGljZScsXG4gICAgJy8vQm9iJyxcbiAgICAnLy9DaGFybGllJyxcbiAgICAnLy9EYXZlJyxcbiAgICAnLy9FdmUnLFxuICAgICcvL0ZyYW5rJyxcbiAgICAnLy9HcmFjZScsXG4gICAgJy8vSGFycnknLFxuICAgICcvL0l2eScsXG4gICAgJy8vSmFjb2InLFxuXTtcbmV4cG9ydHMuTUFJTk5FVF9TUzU4X0ZPUk1BVCA9IDYwOTQ7XG5leHBvcnRzLkRFRkFVTFRfU1M1OF9GT1JNQVQgPSBleHBvcnRzLk1BSU5ORVRfU1M1OF9GT1JNQVQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/crypto.js":
/*!***********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/crypto.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/crypto.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.blake2b_256 = blake2b_256;\nexports.stringToUint8Array = stringToUint8Array;\nexports.concatenateUint8Arrays = concatenateUint8Arrays;\nconst util_crypto_1 = __webpack_require__(/*! @polkadot/util-crypto */ \"(ssr)/./node_modules/@polkadot/util-crypto/index.js\");\n/**\n * Hashes the given data using BLAKE2b-256.\n *\n * @param data Uint8Array - The data to be hashed.\n * @returns string - The BLAKE2b-256 hash of the data as a hex string.\n */\nfunction blake2b_256(data) {\n    return (0, util_crypto_1.blake2AsHex)(data, 256);\n}\n/**\n * Converts a string to a Uint8Array using UTF-8 encoding.\n *\n * This function uses the TextEncoder API to convert a plain string into its equivalent byte array\n * representation in UTF-8 format. It is useful for scenarios where string data needs to be processed\n * in a binary format, such as hashing or cryptographic operations.\n *\n * @param text The string to be converted into a byte array.\n * @returns Uint8Array - The UTF-8 encoded byte array representation of the input string.\n *\n * @example\n * const text = \"Hello, world!\";\n * const byteArray = stringToUint8Array(text);\n * console.log(byteArray); // Outputs the byte array of the string\n */\nfunction stringToUint8Array(text) {\n    const encoder = new TextEncoder(); // Create a new TextEncoder instance\n    return encoder.encode(text); // Encode the string to a Uint8Array using UTF-8 encoding\n}\n/**\n * Concatenates two Uint8Array instances into a single Uint8Array.\n *\n * This function efficiently combines two byte arrays into a single array, preserving\n * the order of the input arrays. It's commonly used for combining data before hashing,\n * creating composite data structures, or preparing data for cryptographic operations.\n *\n * @param array1 - The first Uint8Array to concatenate.\n * @param array2 - The second Uint8Array to concatenate.\n * @returns A new Uint8Array containing all bytes from array1 followed by all bytes from array2.\n *\n * @example\n * import { stringToUint8Array, concatenateUint8Arrays } from '@autonomys/auto-utils'\n *\n * // Concatenate two strings as byte arrays\n * const part1 = stringToUint8Array('Hello, ')\n * const part2 = stringToUint8Array('Autonomys!')\n * const combined = concatenateUint8Arrays(part1, part2)\n *\n * // Convert back to string to verify\n * const result = new TextDecoder().decode(combined)\n * console.log(result) // Output: \"Hello, Autonomys!\"\n * console.log(combined.length) // Output: 16 (total length of both arrays)\n *\n * // Concatenate with hash data\n * const data1 = stringToUint8Array('message1')\n * const data2 = stringToUint8Array('message2')\n * const combinedData = concatenateUint8Arrays(data1, data2)\n * const hash = blake2b_256(combinedData)\n * console.log(hash) // Output: hash of combined data\n */\nfunction concatenateUint8Arrays(array1, array2) {\n    const combined = new Uint8Array(array1.length + array2.length);\n    combined.set(array1);\n    combined.set(array2, array1.length);\n    return combined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsc0JBQXNCLG1CQUFPLENBQUMsa0ZBQXVCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2Q0FBNkM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC9jcnlwdG8uanM/Mzk3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIGZpbGU6IHNyYy9jcnlwdG8udHNcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmxha2UyYl8yNTYgPSBibGFrZTJiXzI1NjtcbmV4cG9ydHMuc3RyaW5nVG9VaW50OEFycmF5ID0gc3RyaW5nVG9VaW50OEFycmF5O1xuZXhwb3J0cy5jb25jYXRlbmF0ZVVpbnQ4QXJyYXlzID0gY29uY2F0ZW5hdGVVaW50OEFycmF5cztcbmNvbnN0IHV0aWxfY3J5cHRvXzEgPSByZXF1aXJlKFwiQHBvbGthZG90L3V0aWwtY3J5cHRvXCIpO1xuLyoqXG4gKiBIYXNoZXMgdGhlIGdpdmVuIGRhdGEgdXNpbmcgQkxBS0UyYi0yNTYuXG4gKlxuICogQHBhcmFtIGRhdGEgVWludDhBcnJheSAtIFRoZSBkYXRhIHRvIGJlIGhhc2hlZC5cbiAqIEByZXR1cm5zIHN0cmluZyAtIFRoZSBCTEFLRTJiLTI1NiBoYXNoIG9mIHRoZSBkYXRhIGFzIGEgaGV4IHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmxha2UyYl8yNTYoZGF0YSkge1xuICAgIHJldHVybiAoMCwgdXRpbF9jcnlwdG9fMS5ibGFrZTJBc0hleCkoZGF0YSwgMjU2KTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSBVaW50OEFycmF5IHVzaW5nIFVURi04IGVuY29kaW5nLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgVGV4dEVuY29kZXIgQVBJIHRvIGNvbnZlcnQgYSBwbGFpbiBzdHJpbmcgaW50byBpdHMgZXF1aXZhbGVudCBieXRlIGFycmF5XG4gKiByZXByZXNlbnRhdGlvbiBpbiBVVEYtOCBmb3JtYXQuIEl0IGlzIHVzZWZ1bCBmb3Igc2NlbmFyaW9zIHdoZXJlIHN0cmluZyBkYXRhIG5lZWRzIHRvIGJlIHByb2Nlc3NlZFxuICogaW4gYSBiaW5hcnkgZm9ybWF0LCBzdWNoIGFzIGhhc2hpbmcgb3IgY3J5cHRvZ3JhcGhpYyBvcGVyYXRpb25zLlxuICpcbiAqIEBwYXJhbSB0ZXh0IFRoZSBzdHJpbmcgdG8gYmUgY29udmVydGVkIGludG8gYSBieXRlIGFycmF5LlxuICogQHJldHVybnMgVWludDhBcnJheSAtIFRoZSBVVEYtOCBlbmNvZGVkIGJ5dGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgdGV4dCA9IFwiSGVsbG8sIHdvcmxkIVwiO1xuICogY29uc3QgYnl0ZUFycmF5ID0gc3RyaW5nVG9VaW50OEFycmF5KHRleHQpO1xuICogY29uc29sZS5sb2coYnl0ZUFycmF5KTsgLy8gT3V0cHV0cyB0aGUgYnl0ZSBhcnJheSBvZiB0aGUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvVWludDhBcnJheSh0ZXh0KSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpOyAvLyBDcmVhdGUgYSBuZXcgVGV4dEVuY29kZXIgaW5zdGFuY2VcbiAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUodGV4dCk7IC8vIEVuY29kZSB0aGUgc3RyaW5nIHRvIGEgVWludDhBcnJheSB1c2luZyBVVEYtOCBlbmNvZGluZ1xufVxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdHdvIFVpbnQ4QXJyYXkgaW5zdGFuY2VzIGludG8gYSBzaW5nbGUgVWludDhBcnJheS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGVmZmljaWVudGx5IGNvbWJpbmVzIHR3byBieXRlIGFycmF5cyBpbnRvIGEgc2luZ2xlIGFycmF5LCBwcmVzZXJ2aW5nXG4gKiB0aGUgb3JkZXIgb2YgdGhlIGlucHV0IGFycmF5cy4gSXQncyBjb21tb25seSB1c2VkIGZvciBjb21iaW5pbmcgZGF0YSBiZWZvcmUgaGFzaGluZyxcbiAqIGNyZWF0aW5nIGNvbXBvc2l0ZSBkYXRhIHN0cnVjdHVyZXMsIG9yIHByZXBhcmluZyBkYXRhIGZvciBjcnlwdG9ncmFwaGljIG9wZXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIGFycmF5MSAtIFRoZSBmaXJzdCBVaW50OEFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICogQHBhcmFtIGFycmF5MiAtIFRoZSBzZWNvbmQgVWludDhBcnJheSB0byBjb25jYXRlbmF0ZS5cbiAqIEByZXR1cm5zIEEgbmV3IFVpbnQ4QXJyYXkgY29udGFpbmluZyBhbGwgYnl0ZXMgZnJvbSBhcnJheTEgZm9sbG93ZWQgYnkgYWxsIGJ5dGVzIGZyb20gYXJyYXkyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBzdHJpbmdUb1VpbnQ4QXJyYXksIGNvbmNhdGVuYXRlVWludDhBcnJheXMgfSBmcm9tICdAYXV0b25vbXlzL2F1dG8tdXRpbHMnXG4gKlxuICogLy8gQ29uY2F0ZW5hdGUgdHdvIHN0cmluZ3MgYXMgYnl0ZSBhcnJheXNcbiAqIGNvbnN0IHBhcnQxID0gc3RyaW5nVG9VaW50OEFycmF5KCdIZWxsbywgJylcbiAqIGNvbnN0IHBhcnQyID0gc3RyaW5nVG9VaW50OEFycmF5KCdBdXRvbm9teXMhJylcbiAqIGNvbnN0IGNvbWJpbmVkID0gY29uY2F0ZW5hdGVVaW50OEFycmF5cyhwYXJ0MSwgcGFydDIpXG4gKlxuICogLy8gQ29udmVydCBiYWNrIHRvIHN0cmluZyB0byB2ZXJpZnlcbiAqIGNvbnN0IHJlc3VsdCA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjb21iaW5lZClcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCkgLy8gT3V0cHV0OiBcIkhlbGxvLCBBdXRvbm9teXMhXCJcbiAqIGNvbnNvbGUubG9nKGNvbWJpbmVkLmxlbmd0aCkgLy8gT3V0cHV0OiAxNiAodG90YWwgbGVuZ3RoIG9mIGJvdGggYXJyYXlzKVxuICpcbiAqIC8vIENvbmNhdGVuYXRlIHdpdGggaGFzaCBkYXRhXG4gKiBjb25zdCBkYXRhMSA9IHN0cmluZ1RvVWludDhBcnJheSgnbWVzc2FnZTEnKVxuICogY29uc3QgZGF0YTIgPSBzdHJpbmdUb1VpbnQ4QXJyYXkoJ21lc3NhZ2UyJylcbiAqIGNvbnN0IGNvbWJpbmVkRGF0YSA9IGNvbmNhdGVuYXRlVWludDhBcnJheXMoZGF0YTEsIGRhdGEyKVxuICogY29uc3QgaGFzaCA9IGJsYWtlMmJfMjU2KGNvbWJpbmVkRGF0YSlcbiAqIGNvbnNvbGUubG9nKGhhc2gpIC8vIE91dHB1dDogaGFzaCBvZiBjb21iaW5lZCBkYXRhXG4gKi9cbmZ1bmN0aW9uIGNvbmNhdGVuYXRlVWludDhBcnJheXMoYXJyYXkxLCBhcnJheTIpIHtcbiAgICBjb25zdCBjb21iaW5lZCA9IG5ldyBVaW50OEFycmF5KGFycmF5MS5sZW5ndGggKyBhcnJheTIubGVuZ3RoKTtcbiAgICBjb21iaW5lZC5zZXQoYXJyYXkxKTtcbiAgICBjb21iaW5lZC5zZXQoYXJyYXkyLCBhcnJheTEubGVuZ3RoKTtcbiAgICByZXR1cm4gY29tYmluZWQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// file: src/index.ts\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./crypto */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/crypto.js\"), exports);\n__exportStar(__webpack_require__(/*! ./keyring */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/keyring.js\"), exports);\n__exportStar(__webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/network.js\"), exports);\n__exportStar(__webpack_require__(/*! ./number */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/number.js\"), exports);\n__exportStar(__webpack_require__(/*! ./string */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/string.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/wallet.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNkVBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLHFFQUFPO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQywyRUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsNkVBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLDZFQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQywyRUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsMkVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDJFQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyx1RkFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsK0VBQVM7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLCtFQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC9pbmRleC5qcz8wMDUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gZmlsZTogc3JjL2luZGV4LnRzXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hcGlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NyeXB0b1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4va2V5cmluZ1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmV0d29ya1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbnVtYmVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhbGxldFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/keyring.js":
/*!************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/keyring.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Keyring = void 0;\nconst keyring_1 = __importDefault(__webpack_require__(/*! @polkadot/keyring */ \"(ssr)/./node_modules/@polkadot/keyring/index.js\"));\nexports.Keyring = keyring_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3Qva2V5cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixrQ0FBa0MsbUJBQU8sQ0FBQywwRUFBbUI7QUFDN0QsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3Qva2V5cmluZy5qcz82ZjNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LZXlyaW5nID0gdm9pZCAwO1xuY29uc3Qga2V5cmluZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAcG9sa2Fkb3Qva2V5cmluZ1wiKSk7XG5leHBvcnRzLktleXJpbmcgPSBrZXlyaW5nXzEuZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/keyring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/network.js":
/*!************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/network.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/network.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getNetworkDomainRpcUrls = exports.getNetworkDomainDetails = exports.getNetworkRpcUrls = exports.getNetworkDetails = void 0;\nconst network_1 = __webpack_require__(/*! ./constants/network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/network.js\");\n/**\n * Retrieves detailed information about a specific Autonomys network.\n *\n * This function provides access to comprehensive network configuration including\n * RPC endpoints, explorer URLs, domain information, and token details. If no\n * network ID is specified, it returns the default network (mainnet).\n *\n * @param input - Optional network parameters containing the networkId.\n * @returns Complete network configuration object with all network details.\n *\n * @example\n * import { getNetworkDetails } from '@autonomys/auto-utils'\n *\n * // Get default network (mainnet)\n * const mainnet = getNetworkDetails()\n * console.log(mainnet.name) // Output: \"Mainnet\"\n * console.log(mainnet.token.symbol) // Output: \"AI3\"\n *\n * // Get specific network details\n * const mainnet = getNetworkDetails({ networkId: 'mainnet' })\n * console.log(mainnet.name) // Output: \"Mainnet\"\n * console.log(mainnet.isTestnet) // Output: undefined\n * console.log(mainnet.domains.length) // Output: 1 (Auto-EVM domain)\n *\n * // Access network explorers\n * const mainnet = getNetworkDetails({ networkId: 'mainnet' })\n * console.log(mainnet.explorer[0].name) // Output: \"Astral\"\n * console.log(mainnet.explorer[0].url) // Output: explorer URL\n *\n * // Check if network is for local development\n * const localhost = getNetworkDetails({ networkId: 'localhost' })\n * console.log(localhost.isLocalhost) // Output: true\n *\n * @throws {Error} When the specified networkId is not found in the available networks.\n */\nconst getNetworkDetails = (input) => {\n    // If no id is provided, return the default network\n    if (!input || !input.networkId)\n        return network_1.defaultNetwork;\n    const { networkId } = input;\n    // Find the network with the provided id\n    const network = network_1.networks.find((network) => network.id === networkId);\n    if (!network)\n        throw new Error(`Network with id ${networkId} not found`);\n    return network;\n};\nexports.getNetworkDetails = getNetworkDetails;\n/**\n * Retrieves the RPC endpoint URLs for a specific Autonomys network.\n *\n * This function returns an array of WebSocket RPC URLs that can be used to\n * connect to the specified network's consensus layer. Multiple URLs provide\n * redundancy and load balancing capabilities.\n *\n * @param input - Optional network parameters containing the networkId.\n * @returns Array of WebSocket RPC URLs for the specified network.\n *\n * @example\n * import { getNetworkRpcUrls } from '@autonomys/auto-utils'\n *\n * // Get mainnet RPC URLs\n * const mainnetUrls = getNetworkRpcUrls()\n * console.log(mainnetUrls)\n * // Output: ['wss://rpc-0.mainnet.subspace.network/ws', 'wss://rpc-1.mainnet.subspace.network/ws', ...]\n *\n * // Get testnet RPC URLs\n * const taurusUrls = getNetworkRpcUrls({ networkId: 'taurus' })\n * console.log(taurusUrls)\n * // Output: ['wss://rpc-0.taurus.autonomys.xyz/ws', 'wss://rpc-1.taurus.autonomys.xyz/ws', ...]\n *\n * // Use with API connection\n * import { createConnection } from '@autonomys/auto-utils'\n * const endpoints = getNetworkRpcUrls({ networkId: 'mainnet' })\n * const api = await createConnection(endpoints)\n *\n * // Get localhost URLs for development\n * const localUrls = getNetworkRpcUrls({ networkId: 'localhost' })\n * console.log(localUrls) // Output: ['ws://127.0.0.1:9944/ws']\n *\n * @throws {Error} When the specified network is not found.\n * @throws {Error} When the network has no configured RPC URLs.\n */\nconst getNetworkRpcUrls = (input) => {\n    // Get the network details\n    const network = (0, exports.getNetworkDetails)(input);\n    if (!network.rpcUrls || network.rpcUrls.length === 0)\n        throw new Error('Network has no rpcUrls');\n    return network.rpcUrls;\n};\nexports.getNetworkRpcUrls = getNetworkRpcUrls;\n/**\n * Retrieves detailed information about a specific domain within an Autonomys network.\n *\n * This function provides access to domain-specific configuration including\n * the domain's runtime type, name, and RPC endpoints. Domains are specialized\n * execution environments that run on top of the Autonomys consensus layer.\n *\n * @param params - Domain parameters containing both networkId and domainId.\n * @returns Complete domain configuration object with runtime and connection details.\n *\n * @example\n * import { getNetworkDomainDetails } from '@autonomys/auto-utils'\n *\n * // Get Auto-EVM domain details on Taurus\n * const evmDomain = getNetworkDomainDetails({\n *   networkId: 'taurus',\n *   domainId: '0'\n * })\n * console.log(evmDomain.name) // Output: \"Auto-EVM\"\n * console.log(evmDomain.runtime) // Output: \"auto-evm\"\n * console.log(evmDomain.rpcUrls.length) // Output: number of available RPC endpoints\n *\n * // Get Auto-EVM domain details on Mainnet\n * const autoEvmDomain = getNetworkDomainDetails({\n *   networkId: 'mainnet',\n *   domainId: '0'\n * })\n * console.log(autoEvmDomain.name) // Output: \"Auto-EVM\"\n * console.log(autoEvmDomain.runtime) // Output: \"auto-evm\"\n *\n * // Use with domain connection\n * import { activateDomain } from '@autonomys/auto-utils'\n * const domainApi = await activateDomain({\n *   networkId: 'taurus',\n *   domainId: '0'\n * })\n *\n * @throws {Error} When the specified networkId is not found.\n * @throws {Error} When the specified domainId is not found within the network.\n */\nconst getNetworkDomainDetails = (params) => {\n    const { networkId, domainId } = params;\n    // Find the network with the provided id\n    const network = (0, exports.getNetworkDetails)({ networkId });\n    if (!network)\n        throw new Error(`Network with id ${networkId} not found`);\n    // Find the domain with the provided id\n    const domain = network.domains.find((domain) => domain.domainId === domainId);\n    if (!domain)\n        throw new Error(`Domain with id ${domainId} not found`);\n    return domain;\n};\nexports.getNetworkDomainDetails = getNetworkDomainDetails;\n/**\n * Retrieves the RPC endpoint URLs for a specific domain within an Autonomys network.\n *\n * This function returns an array of WebSocket RPC URLs that can be used to\n * connect to the specified domain. Domain RPC endpoints provide access to\n * domain-specific functionality and state.\n *\n * @param params - Domain parameters containing both networkId and domainId.\n * @returns Array of WebSocket RPC URLs for the specified domain.\n *\n * @example\n * import { getNetworkDomainRpcUrls } from '@autonomys/auto-utils'\n *\n * // Get Auto-EVM domain RPC URLs on Taurus\n * const evmUrls = getNetworkDomainRpcUrls({\n *   networkId: 'taurus',\n *   domainId: '0'\n * })\n * console.log(evmUrls)\n * // Output: ['wss://auto-evm.taurus.autonomys.xyz/ws', 'wss://auto-evm-0.taurus.autonomys.xyz/ws', ...]\n *\n * // Get Auto-EVM domain RPC URLs on Mainnet\n * const autoEvmUrls = getNetworkDomainRpcUrls({\n *   networkId: 'mainnet',\n *   domainId: '0'\n * })\n * console.log(autoEvmUrls)\n * // Output: ['wss://auto-evm.taurus.autonomys.xyz/ws']\n *\n * // Use with API connection\n * import { createConnection } from '@autonomys/auto-utils'\n * const domainEndpoints = getNetworkDomainRpcUrls({\n *   networkId: 'localhost',\n *   domainId: '0'\n * })\n * const domainApi = await createConnection(domainEndpoints)\n *\n * @throws {Error} When the specified network or domain is not found.\n * @throws {Error} When the domain has no configured RPC URLs.\n */\nconst getNetworkDomainRpcUrls = (params) => {\n    // Get the network details\n    const domain = (0, exports.getNetworkDomainDetails)(params);\n    if (!domain.rpcUrls || domain.rpcUrls.length === 0)\n        throw new Error('Domain has no rpcUrls');\n    return domain.rpcUrls;\n};\nexports.getNetworkDomainRpcUrls = getNetworkDomainRpcUrls;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/number.js":
/*!***********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/number.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSpacePledged = exports.formatTokenAmount = exports.parseTokenAmount = void 0;\nconst number_1 = __webpack_require__(/*! ./constants/number */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/number.js\");\nconst token_1 = __webpack_require__(/*! ./constants/token */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/token.js\");\n/**\n * Parses a token amount from its smallest unit representation to a human-readable format.\n *\n * This function converts token amounts stored in their smallest unit (with decimal places)\n * back to their standard decimal representation. It handles both string and BigInt inputs\n * and is essential for displaying token balances in user interfaces.\n *\n * @param amount - The token amount in smallest units (string or BigInt).\n * @param decimals - Number of decimal places the token uses. Defaults to 18 for AI3 tokens.\n * @returns The parsed amount as a number with decimal places applied.\n *\n * @example\n * import { parseTokenAmount } from '@autonomys/auto-utils'\n *\n * // Parse AI3 token amount (18 decimals)\n * const balance = '1000000000000000000' // 1 AI3 in smallest units\n * const readable = parseTokenAmount(balance)\n * console.log(readable) // Output: 1\n *\n * // Parse with custom decimals\n * const customBalance = BigInt('1000000') // 1 token with 6 decimals\n * const customReadable = parseTokenAmount(customBalance, 6)\n * console.log(customReadable) // Output: 1\n *\n * // Parse fractional amounts\n * const fractional = '500000000000000000' // 0.5 AI3\n * const fractionalReadable = parseTokenAmount(fractional)\n * console.log(fractionalReadable) // Output: 0.5\n */\nconst parseTokenAmount = (amount, decimals = token_1.DEFAULT_TOKEN_DECIMALS) => {\n    if (typeof amount === 'bigint')\n        return amount / BigInt(Math.pow(10, decimals));\n    return parseFloat(amount) / Math.pow(10, decimals);\n};\nexports.parseTokenAmount = parseTokenAmount;\n/**\n * Formats a human-readable token amount to its smallest unit representation.\n *\n * This function converts user-friendly decimal token amounts into the format required\n * for blockchain transactions. It multiplies the amount by the appropriate power of 10\n * based on the token's decimal places.\n *\n * @param amount - The token amount in human-readable format (number or BigInt).\n * @param decimals - Number of decimal places the token uses. Defaults to 18 for AI3 tokens.\n * @returns The formatted amount in smallest units (BigInt for BigInt input, number for number input).\n *\n * @example\n * import { formatTokenAmount } from '@autonomys/auto-utils'\n *\n * // Format AI3 token amount (18 decimals)\n * const userAmount = 1.5 // 1.5 AI3\n * const formatted = formatTokenAmount(userAmount)\n * console.log(formatted) // Output: 1500000000000000000\n *\n * // Format with BigInt input\n * const bigAmount = BigInt(10)\n * const bigFormatted = formatTokenAmount(bigAmount)\n * console.log(bigFormatted) // Output: 10000000000000000000n\n *\n * // Format with custom decimals\n * const customAmount = 100\n * const customFormatted = formatTokenAmount(customAmount, 6)\n * console.log(customFormatted) // Output: 100000000\n */\nconst formatTokenAmount = (amount, decimals = token_1.DEFAULT_TOKEN_DECIMALS) => {\n    if (typeof amount === 'bigint')\n        return amount * BigInt(Math.pow(10, decimals));\n    return amount * Math.pow(10, decimals);\n};\nexports.formatTokenAmount = formatTokenAmount;\n/**\n * Formats a space pledged value into a human-readable format with appropriate units.\n *\n * This function converts raw byte values into readable formats using binary units\n * (KiB, MiB, GiB, etc.). It's specifically designed for displaying storage space\n * amounts in the Autonomys Network, such as pledged storage space by farmers.\n *\n * @param value - The space value in bytes as a BigInt.\n * @param decimals - Number of decimal places to display. Defaults to 2.\n * @returns A formatted string with the appropriate unit (e.g., \"1.50 TiB\").\n *\n * @example\n * import { formatSpacePledged } from '@autonomys/auto-utils'\n *\n * // Format small amounts\n * const smallSpace = BigInt(1024)\n * console.log(formatSpacePledged(smallSpace)) // Output: \"1.00 KiB\"\n *\n * // Format large amounts\n * const largeSpace = BigInt('1099511627776') // 1 TiB in bytes\n * console.log(formatSpacePledged(largeSpace)) // Output: \"1.00 TiB\"\n *\n * // Format with custom decimal places\n * const customSpace = BigInt('1610612736') // 1.5 GiB\n * console.log(formatSpacePledged(customSpace, 3)) // Output: \"1.500 GiB\"\n *\n * // Handle zero values\n * console.log(formatSpacePledged(BigInt(0))) // Output: \"0 Bytes\"\n *\n * // Handle very large values\n * const hugeSpace = BigInt('1152921504606846976') // 1 EiB\n * console.log(formatSpacePledged(hugeSpace)) // Output: \"1.00 EiB\"\n */\nconst formatSpacePledged = (value, decimals = 2) => {\n    if (typeof value !== 'bigint' || value === number_1.BIGINT_ZERO)\n        return '0 Bytes';\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    const i = Math.floor(Math.log(Number(value)) / Math.log(k));\n    return (Number(value) / Math.pow(k, i)).toFixed(dm) + ' ' + sizes[i];\n};\nexports.formatSpacePledged = formatSpacePledged;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvbnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHlCQUF5QixHQUFHLHdCQUF3QjtBQUNqRixpQkFBaUIsbUJBQU8sQ0FBQywrRkFBb0I7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvbnVtYmVyLmpzPzRiOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFNwYWNlUGxlZGdlZCA9IGV4cG9ydHMuZm9ybWF0VG9rZW5BbW91bnQgPSBleHBvcnRzLnBhcnNlVG9rZW5BbW91bnQgPSB2b2lkIDA7XG5jb25zdCBudW1iZXJfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy9udW1iZXJcIik7XG5jb25zdCB0b2tlbl8xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzL3Rva2VuXCIpO1xuLyoqXG4gKiBQYXJzZXMgYSB0b2tlbiBhbW91bnQgZnJvbSBpdHMgc21hbGxlc3QgdW5pdCByZXByZXNlbnRhdGlvbiB0byBhIGh1bWFuLXJlYWRhYmxlIGZvcm1hdC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIHRva2VuIGFtb3VudHMgc3RvcmVkIGluIHRoZWlyIHNtYWxsZXN0IHVuaXQgKHdpdGggZGVjaW1hbCBwbGFjZXMpXG4gKiBiYWNrIHRvIHRoZWlyIHN0YW5kYXJkIGRlY2ltYWwgcmVwcmVzZW50YXRpb24uIEl0IGhhbmRsZXMgYm90aCBzdHJpbmcgYW5kIEJpZ0ludCBpbnB1dHNcbiAqIGFuZCBpcyBlc3NlbnRpYWwgZm9yIGRpc3BsYXlpbmcgdG9rZW4gYmFsYW5jZXMgaW4gdXNlciBpbnRlcmZhY2VzLlxuICpcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgdG9rZW4gYW1vdW50IGluIHNtYWxsZXN0IHVuaXRzIChzdHJpbmcgb3IgQmlnSW50KS5cbiAqIEBwYXJhbSBkZWNpbWFscyAtIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0aGUgdG9rZW4gdXNlcy4gRGVmYXVsdHMgdG8gMTggZm9yIEFJMyB0b2tlbnMuXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGFtb3VudCBhcyBhIG51bWJlciB3aXRoIGRlY2ltYWwgcGxhY2VzIGFwcGxpZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IHBhcnNlVG9rZW5BbW91bnQgfSBmcm9tICdAYXV0b25vbXlzL2F1dG8tdXRpbHMnXG4gKlxuICogLy8gUGFyc2UgQUkzIHRva2VuIGFtb3VudCAoMTggZGVjaW1hbHMpXG4gKiBjb25zdCBiYWxhbmNlID0gJzEwMDAwMDAwMDAwMDAwMDAwMDAnIC8vIDEgQUkzIGluIHNtYWxsZXN0IHVuaXRzXG4gKiBjb25zdCByZWFkYWJsZSA9IHBhcnNlVG9rZW5BbW91bnQoYmFsYW5jZSlcbiAqIGNvbnNvbGUubG9nKHJlYWRhYmxlKSAvLyBPdXRwdXQ6IDFcbiAqXG4gKiAvLyBQYXJzZSB3aXRoIGN1c3RvbSBkZWNpbWFsc1xuICogY29uc3QgY3VzdG9tQmFsYW5jZSA9IEJpZ0ludCgnMTAwMDAwMCcpIC8vIDEgdG9rZW4gd2l0aCA2IGRlY2ltYWxzXG4gKiBjb25zdCBjdXN0b21SZWFkYWJsZSA9IHBhcnNlVG9rZW5BbW91bnQoY3VzdG9tQmFsYW5jZSwgNilcbiAqIGNvbnNvbGUubG9nKGN1c3RvbVJlYWRhYmxlKSAvLyBPdXRwdXQ6IDFcbiAqXG4gKiAvLyBQYXJzZSBmcmFjdGlvbmFsIGFtb3VudHNcbiAqIGNvbnN0IGZyYWN0aW9uYWwgPSAnNTAwMDAwMDAwMDAwMDAwMDAwJyAvLyAwLjUgQUkzXG4gKiBjb25zdCBmcmFjdGlvbmFsUmVhZGFibGUgPSBwYXJzZVRva2VuQW1vdW50KGZyYWN0aW9uYWwpXG4gKiBjb25zb2xlLmxvZyhmcmFjdGlvbmFsUmVhZGFibGUpIC8vIE91dHB1dDogMC41XG4gKi9cbmNvbnN0IHBhcnNlVG9rZW5BbW91bnQgPSAoYW1vdW50LCBkZWNpbWFscyA9IHRva2VuXzEuREVGQVVMVF9UT0tFTl9ERUNJTUFMUykgPT4ge1xuICAgIGlmICh0eXBlb2YgYW1vdW50ID09PSAnYmlnaW50JylcbiAgICAgICAgcmV0dXJuIGFtb3VudCAvIEJpZ0ludChNYXRoLnBvdygxMCwgZGVjaW1hbHMpKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChhbW91bnQpIC8gTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbn07XG5leHBvcnRzLnBhcnNlVG9rZW5BbW91bnQgPSBwYXJzZVRva2VuQW1vdW50O1xuLyoqXG4gKiBGb3JtYXRzIGEgaHVtYW4tcmVhZGFibGUgdG9rZW4gYW1vdW50IHRvIGl0cyBzbWFsbGVzdCB1bml0IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY29udmVydHMgdXNlci1mcmllbmRseSBkZWNpbWFsIHRva2VuIGFtb3VudHMgaW50byB0aGUgZm9ybWF0IHJlcXVpcmVkXG4gKiBmb3IgYmxvY2tjaGFpbiB0cmFuc2FjdGlvbnMuIEl0IG11bHRpcGxpZXMgdGhlIGFtb3VudCBieSB0aGUgYXBwcm9wcmlhdGUgcG93ZXIgb2YgMTBcbiAqIGJhc2VkIG9uIHRoZSB0b2tlbidzIGRlY2ltYWwgcGxhY2VzLlxuICpcbiAqIEBwYXJhbSBhbW91bnQgLSBUaGUgdG9rZW4gYW1vdW50IGluIGh1bWFuLXJlYWRhYmxlIGZvcm1hdCAobnVtYmVyIG9yIEJpZ0ludCkuXG4gKiBAcGFyYW0gZGVjaW1hbHMgLSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdGhlIHRva2VuIHVzZXMuIERlZmF1bHRzIHRvIDE4IGZvciBBSTMgdG9rZW5zLlxuICogQHJldHVybnMgVGhlIGZvcm1hdHRlZCBhbW91bnQgaW4gc21hbGxlc3QgdW5pdHMgKEJpZ0ludCBmb3IgQmlnSW50IGlucHV0LCBudW1iZXIgZm9yIG51bWJlciBpbnB1dCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGZvcm1hdFRva2VuQW1vdW50IH0gZnJvbSAnQGF1dG9ub215cy9hdXRvLXV0aWxzJ1xuICpcbiAqIC8vIEZvcm1hdCBBSTMgdG9rZW4gYW1vdW50ICgxOCBkZWNpbWFscylcbiAqIGNvbnN0IHVzZXJBbW91bnQgPSAxLjUgLy8gMS41IEFJM1xuICogY29uc3QgZm9ybWF0dGVkID0gZm9ybWF0VG9rZW5BbW91bnQodXNlckFtb3VudClcbiAqIGNvbnNvbGUubG9nKGZvcm1hdHRlZCkgLy8gT3V0cHV0OiAxNTAwMDAwMDAwMDAwMDAwMDAwXG4gKlxuICogLy8gRm9ybWF0IHdpdGggQmlnSW50IGlucHV0XG4gKiBjb25zdCBiaWdBbW91bnQgPSBCaWdJbnQoMTApXG4gKiBjb25zdCBiaWdGb3JtYXR0ZWQgPSBmb3JtYXRUb2tlbkFtb3VudChiaWdBbW91bnQpXG4gKiBjb25zb2xlLmxvZyhiaWdGb3JtYXR0ZWQpIC8vIE91dHB1dDogMTAwMDAwMDAwMDAwMDAwMDAwMDBuXG4gKlxuICogLy8gRm9ybWF0IHdpdGggY3VzdG9tIGRlY2ltYWxzXG4gKiBjb25zdCBjdXN0b21BbW91bnQgPSAxMDBcbiAqIGNvbnN0IGN1c3RvbUZvcm1hdHRlZCA9IGZvcm1hdFRva2VuQW1vdW50KGN1c3RvbUFtb3VudCwgNilcbiAqIGNvbnNvbGUubG9nKGN1c3RvbUZvcm1hdHRlZCkgLy8gT3V0cHV0OiAxMDAwMDAwMDBcbiAqL1xuY29uc3QgZm9ybWF0VG9rZW5BbW91bnQgPSAoYW1vdW50LCBkZWNpbWFscyA9IHRva2VuXzEuREVGQVVMVF9UT0tFTl9ERUNJTUFMUykgPT4ge1xuICAgIGlmICh0eXBlb2YgYW1vdW50ID09PSAnYmlnaW50JylcbiAgICAgICAgcmV0dXJuIGFtb3VudCAqIEJpZ0ludChNYXRoLnBvdygxMCwgZGVjaW1hbHMpKTtcbiAgICByZXR1cm4gYW1vdW50ICogTWF0aC5wb3coMTAsIGRlY2ltYWxzKTtcbn07XG5leHBvcnRzLmZvcm1hdFRva2VuQW1vdW50ID0gZm9ybWF0VG9rZW5BbW91bnQ7XG4vKipcbiAqIEZvcm1hdHMgYSBzcGFjZSBwbGVkZ2VkIHZhbHVlIGludG8gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXQgd2l0aCBhcHByb3ByaWF0ZSB1bml0cy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIHJhdyBieXRlIHZhbHVlcyBpbnRvIHJlYWRhYmxlIGZvcm1hdHMgdXNpbmcgYmluYXJ5IHVuaXRzXG4gKiAoS2lCLCBNaUIsIEdpQiwgZXRjLikuIEl0J3Mgc3BlY2lmaWNhbGx5IGRlc2lnbmVkIGZvciBkaXNwbGF5aW5nIHN0b3JhZ2Ugc3BhY2VcbiAqIGFtb3VudHMgaW4gdGhlIEF1dG9ub215cyBOZXR3b3JrLCBzdWNoIGFzIHBsZWRnZWQgc3RvcmFnZSBzcGFjZSBieSBmYXJtZXJzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBzcGFjZSB2YWx1ZSBpbiBieXRlcyBhcyBhIEJpZ0ludC5cbiAqIEBwYXJhbSBkZWNpbWFscyAtIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byBkaXNwbGF5LiBEZWZhdWx0cyB0byAyLlxuICogQHJldHVybnMgQSBmb3JtYXR0ZWQgc3RyaW5nIHdpdGggdGhlIGFwcHJvcHJpYXRlIHVuaXQgKGUuZy4sIFwiMS41MCBUaUJcIikuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGZvcm1hdFNwYWNlUGxlZGdlZCB9IGZyb20gJ0BhdXRvbm9teXMvYXV0by11dGlscydcbiAqXG4gKiAvLyBGb3JtYXQgc21hbGwgYW1vdW50c1xuICogY29uc3Qgc21hbGxTcGFjZSA9IEJpZ0ludCgxMDI0KVxuICogY29uc29sZS5sb2coZm9ybWF0U3BhY2VQbGVkZ2VkKHNtYWxsU3BhY2UpKSAvLyBPdXRwdXQ6IFwiMS4wMCBLaUJcIlxuICpcbiAqIC8vIEZvcm1hdCBsYXJnZSBhbW91bnRzXG4gKiBjb25zdCBsYXJnZVNwYWNlID0gQmlnSW50KCcxMDk5NTExNjI3Nzc2JykgLy8gMSBUaUIgaW4gYnl0ZXNcbiAqIGNvbnNvbGUubG9nKGZvcm1hdFNwYWNlUGxlZGdlZChsYXJnZVNwYWNlKSkgLy8gT3V0cHV0OiBcIjEuMDAgVGlCXCJcbiAqXG4gKiAvLyBGb3JtYXQgd2l0aCBjdXN0b20gZGVjaW1hbCBwbGFjZXNcbiAqIGNvbnN0IGN1c3RvbVNwYWNlID0gQmlnSW50KCcxNjEwNjEyNzM2JykgLy8gMS41IEdpQlxuICogY29uc29sZS5sb2coZm9ybWF0U3BhY2VQbGVkZ2VkKGN1c3RvbVNwYWNlLCAzKSkgLy8gT3V0cHV0OiBcIjEuNTAwIEdpQlwiXG4gKlxuICogLy8gSGFuZGxlIHplcm8gdmFsdWVzXG4gKiBjb25zb2xlLmxvZyhmb3JtYXRTcGFjZVBsZWRnZWQoQmlnSW50KDApKSkgLy8gT3V0cHV0OiBcIjAgQnl0ZXNcIlxuICpcbiAqIC8vIEhhbmRsZSB2ZXJ5IGxhcmdlIHZhbHVlc1xuICogY29uc3QgaHVnZVNwYWNlID0gQmlnSW50KCcxMTUyOTIxNTA0NjA2ODQ2OTc2JykgLy8gMSBFaUJcbiAqIGNvbnNvbGUubG9nKGZvcm1hdFNwYWNlUGxlZGdlZChodWdlU3BhY2UpKSAvLyBPdXRwdXQ6IFwiMS4wMCBFaUJcIlxuICovXG5jb25zdCBmb3JtYXRTcGFjZVBsZWRnZWQgPSAodmFsdWUsIGRlY2ltYWxzID0gMikgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdiaWdpbnQnIHx8IHZhbHVlID09PSBudW1iZXJfMS5CSUdJTlRfWkVSTylcbiAgICAgICAgcmV0dXJuICcwIEJ5dGVzJztcbiAgICBjb25zdCBrID0gMTAyNDtcbiAgICBjb25zdCBkbSA9IGRlY2ltYWxzIDwgMCA/IDAgOiBkZWNpbWFscztcbiAgICBjb25zdCBzaXplcyA9IFsnQnl0ZXMnLCAnS2lCJywgJ01pQicsICdHaUInLCAnVGlCJywgJ1BpQicsICdFaUInLCAnWmlCJywgJ1lpQiddO1xuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKE51bWJlcih2YWx1ZSkpIC8gTWF0aC5sb2coaykpO1xuICAgIHJldHVybiAoTnVtYmVyKHZhbHVlKSAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKGRtKSArICcgJyArIHNpemVzW2ldO1xufTtcbmV4cG9ydHMuZm9ybWF0U3BhY2VQbGVkZ2VkID0gZm9ybWF0U3BhY2VQbGVkZ2VkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/string.js":
/*!***********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/string.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/string.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fixLengthEntryId = exports.capitalizeFirstLetter = exports.shortString = exports.stringify = void 0;\n/**\n * Converts any value to a JSON string with BigInt support.\n *\n * This function extends JSON.stringify to handle BigInt values by converting them to strings.\n * It's particularly useful when working with blockchain data that often includes large numbers\n * represented as BigInt values.\n *\n * @param value - Any value to be stringified, including objects with BigInt properties.\n * @returns A JSON string representation of the value with BigInt values converted to strings.\n *\n * @example\n * import { stringify } from '@autonomys/auto-utils'\n *\n * // Stringify object with BigInt values\n * const data = {\n *   balance: BigInt('1000000000000000000'),\n *   timestamp: Date.now(),\n *   address: '5GmS1wtCfR4tK5SSgnZbVT4kYw5W8NmxmijcsxCQE6oLW6A8'\n * }\n *\n * const jsonString = stringify(data)\n * console.log(jsonString)\n * // Output: {\"balance\":\"1000000000000000000\",\"timestamp\":1672531200000,\"address\":\"5G...\"}\n *\n * // Compare with regular JSON.stringify which would throw an error\n * // JSON.stringify(data) // TypeError: Do not know how to serialize a BigInt\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst stringify = (value) => JSON.stringify(value, (_, value) => (typeof value === 'bigint' ? value.toString() : value));\nexports.stringify = stringify;\n/**\n * Truncates a string by keeping the beginning and end characters with ellipsis in the middle.\n *\n * This function is commonly used to display long addresses, transaction hashes, or other\n * identifiers in a compact format while preserving recognizable parts of the original string.\n *\n * @param value - The string to truncate.\n * @param initialLength - Number of characters to keep from the beginning. Defaults to 6.\n * @param endLength - Number of characters to keep from the end (negative number). Defaults to -4.\n * @returns The truncated string with ellipsis in the middle.\n *\n * @example\n * import { shortString } from '@autonomys/auto-utils'\n *\n * // Truncate a long address\n * const address = '5GmS1wtCfR4tK5SSgnZbVT4kYw5W8NmxmijcsxCQE6oLW6A8'\n * const short = shortString(address)\n * console.log(short) // Output: \"5GmS1w...W6A8\"\n *\n * // Custom truncation lengths\n * const customShort = shortString(address, 8, -6)\n * console.log(customShort) // Output: \"5GmS1wtC...oLW6A8\"\n *\n * // Truncate transaction hash\n * const txHash = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'\n * const shortHash = shortString(txHash, 10, -8)\n * console.log(shortHash) // Output: \"0x12345678...90abcdef\"\n */\nconst shortString = (value, initialLength = 6, endLength = -4) => `${value.slice(0, initialLength)}...${value.slice(endLength)}`;\nexports.shortString = shortString;\n/**\n * Capitalizes the first letter of a string.\n *\n * This utility function converts the first character of a string to uppercase while\n * leaving the rest of the string unchanged. It handles empty strings gracefully.\n *\n * @param string - The string to capitalize.\n * @returns The string with the first letter capitalized, or empty string if input is empty.\n *\n * @example\n * import { capitalizeFirstLetter } from '@autonomys/auto-utils'\n *\n * // Capitalize network names\n * console.log(capitalizeFirstLetter('mainnet')) // Output: \"Mainnet\"\n * console.log(capitalizeFirstLetter('taurus')) // Output: \"Taurus\"\n *\n * // Handle edge cases\n * console.log(capitalizeFirstLetter('')) // Output: \"\"\n * console.log(capitalizeFirstLetter('a')) // Output: \"A\"\n * console.log(capitalizeFirstLetter('UPPERCASE')) // Output: \"UPPERCASE\"\n */\nconst capitalizeFirstLetter = (string) => string ? string.charAt(0).toUpperCase() + string.slice(1) : '';\nexports.capitalizeFirstLetter = capitalizeFirstLetter;\n/**\n * Creates a fixed-length entry identifier for blockchain events or transactions.\n *\n * This function generates a standardized identifier format used for indexing blockchain\n * entries, combining block height with optional transaction index. Both values are\n * zero-padded to ensure consistent string length for sorting and indexing.\n *\n * @param blockHeight - The block height as a BigInt.\n * @param indexInBlock - Optional transaction index within the block as a BigInt.\n * @returns A zero-padded string identifier, either \"blockHeight\" or \"blockHeight-indexInBlock\".\n *\n * @example\n * import { fixLengthEntryId } from '@autonomys/auto-utils'\n *\n * // Create block identifier\n * const blockId = fixLengthEntryId(BigInt(12345))\n * console.log(blockId) // Output: \"00000000000000000000000000012345\"\n *\n * // Create transaction identifier\n * const txId = fixLengthEntryId(BigInt(12345), BigInt(7))\n * console.log(txId) // Output: \"00000000000000000000000000012345-00000000000000000000000000000007\"\n *\n * // Use with large numbers\n * const largeBlockId = fixLengthEntryId(BigInt('1000000000000000000'))\n * console.log(largeBlockId) // Output: \"00000000000001000000000000000000\"\n *\n * // Useful for creating sortable identifiers\n * const ids = [\n *   fixLengthEntryId(BigInt(100)),\n *   fixLengthEntryId(BigInt(50)),\n *   fixLengthEntryId(BigInt(200))\n * ]\n * ids.sort() // Will sort correctly due to zero-padding\n */\nconst fixLengthEntryId = (blockHeight, indexInBlock) => {\n    const totalLength = 32;\n    const str1 = blockHeight.toString().padStart(totalLength, '0');\n    if (indexInBlock === undefined)\n        return str1;\n    const str2 = indexInBlock.toString().padStart(totalLength, '0');\n    return `${str1}-${str2}`;\n};\nexports.fixLengthEntryId = fixLengthEntryId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/event.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvZXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL2V2ZW50LmpzP2I4OTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/extrinsic.js":
/*!********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/extrinsic.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/types/extrinsic.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvZXh0cmluc2ljLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL2V4dHJpbnNpYy5qcz9jZWNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gZmlsZTogc3JjL3R5cGVzL2V4dHJpbnNpYy50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/extrinsic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./event */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/event.js\"), exports);\n__exportStar(__webpack_require__(/*! ./extrinsic */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/extrinsic.js\"), exports);\n__exportStar(__webpack_require__(/*! ./network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/network.js\"), exports);\n__exportStar(__webpack_require__(/*! ./query */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/query.js\"), exports);\n__exportStar(__webpack_require__(/*! ./token */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/token.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./wallet */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/types/wallet.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx1RkFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsbUZBQVc7QUFDaEMsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQywrRUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsMkZBQWU7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLGlGQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC90eXBlcy9pbmRleC5qcz9mMzgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXZlbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V4dHJpbnNpY1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbmV0d29ya1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcXVlcnlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Rva2VuXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2FsbGV0XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/network.js":
/*!******************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/network.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CHAIN_TYPES = void 0;\nexports.CHAIN_TYPES = {\n    Solution: {\n        public_key: 'AccountId32',\n        reward_address: 'AccountId32',\n    },\n    SubPreDigest: {\n        slot: 'u64',\n        solution: 'Solution',\n    },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvbmV0d29yay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL25ldHdvcmsuanM/ZmE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ0hBSU5fVFlQRVMgPSB2b2lkIDA7XG5leHBvcnRzLkNIQUlOX1RZUEVTID0ge1xuICAgIFNvbHV0aW9uOiB7XG4gICAgICAgIHB1YmxpY19rZXk6ICdBY2NvdW50SWQzMicsXG4gICAgICAgIHJld2FyZF9hZGRyZXNzOiAnQWNjb3VudElkMzInLFxuICAgIH0sXG4gICAgU3ViUHJlRGlnZXN0OiB7XG4gICAgICAgIHNsb3Q6ICd1NjQnLFxuICAgICAgICBzb2x1dGlvbjogJ1NvbHV0aW9uJyxcbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/query.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/query.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvcXVlcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL3F1ZXJ5LmpzPzMzNTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/token.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/token.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvdG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL3Rva2VuLmpzP2RjZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/transaction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/transaction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/types/transaction.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvdHJhbnNhY3Rpb24uanM/MGY3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIGZpbGU6IHNyYy90eXBlcy90cmFuc2FjdGlvbi50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/types/wallet.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/types/wallet.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/types/wallet.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdHlwZXMvd2FsbGV0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3R5cGVzL3dhbGxldC5qcz9mYWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gZmlsZTogc3JjL3R5cGVzL3dhbGxldC50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/types/wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/createType.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/createType.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createType = exports.createWithdrawStakeByShares = exports.createWithdrawStakeByStake = exports.createWithdrawStakeByPercent = exports.createWithdrawStakeAll = exports.createTransporterToDomainAccount32Type = exports.createTransporterToDomainAccount20Type = exports.createTransporterToConsensusType = exports.createTransporterLocationType = exports.createMultiAccountIdType = exports.createAccountId32Type = exports.createAccountId20Type = exports.createDomainsChainIdType = exports.createAccountIdType = void 0;\nconst types_1 = __webpack_require__(/*! @polkadot/types */ \"(ssr)/./node_modules/@polkadot/types/index.js\");\nObject.defineProperty(exports, \"createType\", ({ enumerable: true, get: function () { return types_1.createType; } }));\nconst createAccountIdType = (api, address) => (0, types_1.createType)(api.registry, 'AccountId', address).toU8a();\nexports.createAccountIdType = createAccountIdType;\nconst createDomainsChainIdType = (api, domainId) => (0, types_1.createType)(api.registry, 'SpDomainsChainId', domainId !== undefined ? { Domain: domainId } : { Consensus: null });\nexports.createDomainsChainIdType = createDomainsChainIdType;\nconst createAccountId20Type = (api, address) => (0, types_1.createType)(api.registry, 'AccountId20', address);\nexports.createAccountId20Type = createAccountId20Type;\nconst createAccountId32Type = (api, address) => (0, types_1.createType)(api.registry, 'AccountId32', address);\nexports.createAccountId32Type = createAccountId32Type;\nconst createMultiAccountIdType = (api, account) => {\n    if (!account.accountId20 && !account.accountId32)\n        throw new Error('Both accountId20 and accountId32 is undefined');\n    if (account.accountId20 && account.accountId32)\n        throw new Error('Both accountId20 and accountId32 are defined, define only one');\n    return (0, types_1.createType)(api.registry, 'DomainRuntimePrimitivesMultiAccountId', account.accountId20\n        ? {\n            AccountId20: account.accountId20,\n        }\n        : { AccountId32: account.accountId32 });\n};\nexports.createMultiAccountIdType = createMultiAccountIdType;\nconst createTransporterLocationType = (api, chainId, accountId) => (0, types_1.createType)(api.registry, 'PalletTransporterLocation', {\n    chainId,\n    accountId,\n});\nexports.createTransporterLocationType = createTransporterLocationType;\nconst createTransporterToConsensusType = (api, accountId32) => {\n    const chainId = (0, exports.createDomainsChainIdType)(api);\n    const accountId = (0, exports.createMultiAccountIdType)(api, {\n        accountId32: (0, exports.createAccountId32Type)(api, accountId32),\n    });\n    return (0, exports.createTransporterLocationType)(api, chainId, accountId);\n};\nexports.createTransporterToConsensusType = createTransporterToConsensusType;\nconst createTransporterToDomainAccount20Type = (api, destinationDomainId, accountId20) => {\n    const chainId = (0, exports.createDomainsChainIdType)(api, destinationDomainId);\n    const accountId = (0, exports.createMultiAccountIdType)(api, {\n        accountId20: (0, exports.createAccountId20Type)(api, accountId20),\n    });\n    return (0, exports.createTransporterLocationType)(api, chainId, accountId);\n};\nexports.createTransporterToDomainAccount20Type = createTransporterToDomainAccount20Type;\nconst createTransporterToDomainAccount32Type = (api, destinationDomainId, accountId32) => {\n    const chainId = (0, exports.createDomainsChainIdType)(api, destinationDomainId);\n    const accountId = (0, exports.createMultiAccountIdType)(api, {\n        accountId32: (0, exports.createAccountId32Type)(api, accountId32),\n    });\n    return (0, exports.createTransporterLocationType)(api, chainId, accountId);\n};\nexports.createTransporterToDomainAccount32Type = createTransporterToDomainAccount32Type;\nconst createWithdrawStakeAll = (api) => (0, types_1.createType)(api.registry, 'PalletDomainsStakingWithdrawStake', { All: null });\nexports.createWithdrawStakeAll = createWithdrawStakeAll;\nconst createWithdrawStakeByPercent = (api, percent) => (0, types_1.createType)(api.registry, 'PalletDomainsStakingWithdrawStake', {\n    Percent: percent,\n});\nexports.createWithdrawStakeByPercent = createWithdrawStakeByPercent;\nconst createWithdrawStakeByStake = (api, stake) => (0, types_1.createType)(api.registry, 'PalletDomainsStakingWithdrawStake', { Stake: stake });\nexports.createWithdrawStakeByStake = createWithdrawStakeByStake;\nconst createWithdrawStakeByShares = (api, shares) => (0, types_1.createType)(api.registry, 'PalletDomainsStakingWithdrawStake', { Shares: shares });\nexports.createWithdrawStakeByShares = createWithdrawStakeByShares;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvY3JlYXRlVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxtQ0FBbUMsR0FBRyxrQ0FBa0MsR0FBRyxvQ0FBb0MsR0FBRyw4QkFBOEIsR0FBRyw4Q0FBOEMsR0FBRyw4Q0FBOEMsR0FBRyx3Q0FBd0MsR0FBRyxxQ0FBcUMsR0FBRyxnQ0FBZ0MsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyxnQ0FBZ0MsR0FBRywyQkFBMkI7QUFDOWYsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQWlCO0FBQ3pDLDhDQUE2QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNuSDtBQUNBLDJCQUEyQjtBQUMzQix5SUFBeUksbUJBQW1CLElBQUksaUJBQWlCO0FBQ2pMLGdDQUFnQztBQUNoQztBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLHFIQUFxSCxXQUFXO0FBQ2hJLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQztBQUNwQyxnSUFBZ0ksY0FBYztBQUM5SSxrQ0FBa0M7QUFDbEMsa0lBQWtJLGdCQUFnQjtBQUNsSixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3V0aWxzL2NyZWF0ZVR5cGUuanM/YmViZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlVHlwZSA9IGV4cG9ydHMuY3JlYXRlV2l0aGRyYXdTdGFrZUJ5U2hhcmVzID0gZXhwb3J0cy5jcmVhdGVXaXRoZHJhd1N0YWtlQnlTdGFrZSA9IGV4cG9ydHMuY3JlYXRlV2l0aGRyYXdTdGFrZUJ5UGVyY2VudCA9IGV4cG9ydHMuY3JlYXRlV2l0aGRyYXdTdGFrZUFsbCA9IGV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ZXJUb0RvbWFpbkFjY291bnQzMlR5cGUgPSBleHBvcnRzLmNyZWF0ZVRyYW5zcG9ydGVyVG9Eb21haW5BY2NvdW50MjBUeXBlID0gZXhwb3J0cy5jcmVhdGVUcmFuc3BvcnRlclRvQ29uc2Vuc3VzVHlwZSA9IGV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ZXJMb2NhdGlvblR5cGUgPSBleHBvcnRzLmNyZWF0ZU11bHRpQWNjb3VudElkVHlwZSA9IGV4cG9ydHMuY3JlYXRlQWNjb3VudElkMzJUeXBlID0gZXhwb3J0cy5jcmVhdGVBY2NvdW50SWQyMFR5cGUgPSBleHBvcnRzLmNyZWF0ZURvbWFpbnNDaGFpbklkVHlwZSA9IGV4cG9ydHMuY3JlYXRlQWNjb3VudElkVHlwZSA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiQHBvbGthZG90L3R5cGVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5jcmVhdGVUeXBlOyB9IH0pO1xuY29uc3QgY3JlYXRlQWNjb3VudElkVHlwZSA9IChhcGksIGFkZHJlc3MpID0+ICgwLCB0eXBlc18xLmNyZWF0ZVR5cGUpKGFwaS5yZWdpc3RyeSwgJ0FjY291bnRJZCcsIGFkZHJlc3MpLnRvVThhKCk7XG5leHBvcnRzLmNyZWF0ZUFjY291bnRJZFR5cGUgPSBjcmVhdGVBY2NvdW50SWRUeXBlO1xuY29uc3QgY3JlYXRlRG9tYWluc0NoYWluSWRUeXBlID0gKGFwaSwgZG9tYWluSWQpID0+ICgwLCB0eXBlc18xLmNyZWF0ZVR5cGUpKGFwaS5yZWdpc3RyeSwgJ1NwRG9tYWluc0NoYWluSWQnLCBkb21haW5JZCAhPT0gdW5kZWZpbmVkID8geyBEb21haW46IGRvbWFpbklkIH0gOiB7IENvbnNlbnN1czogbnVsbCB9KTtcbmV4cG9ydHMuY3JlYXRlRG9tYWluc0NoYWluSWRUeXBlID0gY3JlYXRlRG9tYWluc0NoYWluSWRUeXBlO1xuY29uc3QgY3JlYXRlQWNjb3VudElkMjBUeXBlID0gKGFwaSwgYWRkcmVzcykgPT4gKDAsIHR5cGVzXzEuY3JlYXRlVHlwZSkoYXBpLnJlZ2lzdHJ5LCAnQWNjb3VudElkMjAnLCBhZGRyZXNzKTtcbmV4cG9ydHMuY3JlYXRlQWNjb3VudElkMjBUeXBlID0gY3JlYXRlQWNjb3VudElkMjBUeXBlO1xuY29uc3QgY3JlYXRlQWNjb3VudElkMzJUeXBlID0gKGFwaSwgYWRkcmVzcykgPT4gKDAsIHR5cGVzXzEuY3JlYXRlVHlwZSkoYXBpLnJlZ2lzdHJ5LCAnQWNjb3VudElkMzInLCBhZGRyZXNzKTtcbmV4cG9ydHMuY3JlYXRlQWNjb3VudElkMzJUeXBlID0gY3JlYXRlQWNjb3VudElkMzJUeXBlO1xuY29uc3QgY3JlYXRlTXVsdGlBY2NvdW50SWRUeXBlID0gKGFwaSwgYWNjb3VudCkgPT4ge1xuICAgIGlmICghYWNjb3VudC5hY2NvdW50SWQyMCAmJiAhYWNjb3VudC5hY2NvdW50SWQzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb3RoIGFjY291bnRJZDIwIGFuZCBhY2NvdW50SWQzMiBpcyB1bmRlZmluZWQnKTtcbiAgICBpZiAoYWNjb3VudC5hY2NvdW50SWQyMCAmJiBhY2NvdW50LmFjY291bnRJZDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggYWNjb3VudElkMjAgYW5kIGFjY291bnRJZDMyIGFyZSBkZWZpbmVkLCBkZWZpbmUgb25seSBvbmUnKTtcbiAgICByZXR1cm4gKDAsIHR5cGVzXzEuY3JlYXRlVHlwZSkoYXBpLnJlZ2lzdHJ5LCAnRG9tYWluUnVudGltZVByaW1pdGl2ZXNNdWx0aUFjY291bnRJZCcsIGFjY291bnQuYWNjb3VudElkMjBcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBBY2NvdW50SWQyMDogYWNjb3VudC5hY2NvdW50SWQyMCxcbiAgICAgICAgfVxuICAgICAgICA6IHsgQWNjb3VudElkMzI6IGFjY291bnQuYWNjb3VudElkMzIgfSk7XG59O1xuZXhwb3J0cy5jcmVhdGVNdWx0aUFjY291bnRJZFR5cGUgPSBjcmVhdGVNdWx0aUFjY291bnRJZFR5cGU7XG5jb25zdCBjcmVhdGVUcmFuc3BvcnRlckxvY2F0aW9uVHlwZSA9IChhcGksIGNoYWluSWQsIGFjY291bnRJZCkgPT4gKDAsIHR5cGVzXzEuY3JlYXRlVHlwZSkoYXBpLnJlZ2lzdHJ5LCAnUGFsbGV0VHJhbnNwb3J0ZXJMb2NhdGlvbicsIHtcbiAgICBjaGFpbklkLFxuICAgIGFjY291bnRJZCxcbn0pO1xuZXhwb3J0cy5jcmVhdGVUcmFuc3BvcnRlckxvY2F0aW9uVHlwZSA9IGNyZWF0ZVRyYW5zcG9ydGVyTG9jYXRpb25UeXBlO1xuY29uc3QgY3JlYXRlVHJhbnNwb3J0ZXJUb0NvbnNlbnN1c1R5cGUgPSAoYXBpLCBhY2NvdW50SWQzMikgPT4ge1xuICAgIGNvbnN0IGNoYWluSWQgPSAoMCwgZXhwb3J0cy5jcmVhdGVEb21haW5zQ2hhaW5JZFR5cGUpKGFwaSk7XG4gICAgY29uc3QgYWNjb3VudElkID0gKDAsIGV4cG9ydHMuY3JlYXRlTXVsdGlBY2NvdW50SWRUeXBlKShhcGksIHtcbiAgICAgICAgYWNjb3VudElkMzI6ICgwLCBleHBvcnRzLmNyZWF0ZUFjY291bnRJZDMyVHlwZSkoYXBpLCBhY2NvdW50SWQzMiksXG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmNyZWF0ZVRyYW5zcG9ydGVyTG9jYXRpb25UeXBlKShhcGksIGNoYWluSWQsIGFjY291bnRJZCk7XG59O1xuZXhwb3J0cy5jcmVhdGVUcmFuc3BvcnRlclRvQ29uc2Vuc3VzVHlwZSA9IGNyZWF0ZVRyYW5zcG9ydGVyVG9Db25zZW5zdXNUeXBlO1xuY29uc3QgY3JlYXRlVHJhbnNwb3J0ZXJUb0RvbWFpbkFjY291bnQyMFR5cGUgPSAoYXBpLCBkZXN0aW5hdGlvbkRvbWFpbklkLCBhY2NvdW50SWQyMCkgPT4ge1xuICAgIGNvbnN0IGNoYWluSWQgPSAoMCwgZXhwb3J0cy5jcmVhdGVEb21haW5zQ2hhaW5JZFR5cGUpKGFwaSwgZGVzdGluYXRpb25Eb21haW5JZCk7XG4gICAgY29uc3QgYWNjb3VudElkID0gKDAsIGV4cG9ydHMuY3JlYXRlTXVsdGlBY2NvdW50SWRUeXBlKShhcGksIHtcbiAgICAgICAgYWNjb3VudElkMjA6ICgwLCBleHBvcnRzLmNyZWF0ZUFjY291bnRJZDIwVHlwZSkoYXBpLCBhY2NvdW50SWQyMCksXG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmNyZWF0ZVRyYW5zcG9ydGVyTG9jYXRpb25UeXBlKShhcGksIGNoYWluSWQsIGFjY291bnRJZCk7XG59O1xuZXhwb3J0cy5jcmVhdGVUcmFuc3BvcnRlclRvRG9tYWluQWNjb3VudDIwVHlwZSA9IGNyZWF0ZVRyYW5zcG9ydGVyVG9Eb21haW5BY2NvdW50MjBUeXBlO1xuY29uc3QgY3JlYXRlVHJhbnNwb3J0ZXJUb0RvbWFpbkFjY291bnQzMlR5cGUgPSAoYXBpLCBkZXN0aW5hdGlvbkRvbWFpbklkLCBhY2NvdW50SWQzMikgPT4ge1xuICAgIGNvbnN0IGNoYWluSWQgPSAoMCwgZXhwb3J0cy5jcmVhdGVEb21haW5zQ2hhaW5JZFR5cGUpKGFwaSwgZGVzdGluYXRpb25Eb21haW5JZCk7XG4gICAgY29uc3QgYWNjb3VudElkID0gKDAsIGV4cG9ydHMuY3JlYXRlTXVsdGlBY2NvdW50SWRUeXBlKShhcGksIHtcbiAgICAgICAgYWNjb3VudElkMzI6ICgwLCBleHBvcnRzLmNyZWF0ZUFjY291bnRJZDMyVHlwZSkoYXBpLCBhY2NvdW50SWQzMiksXG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmNyZWF0ZVRyYW5zcG9ydGVyTG9jYXRpb25UeXBlKShhcGksIGNoYWluSWQsIGFjY291bnRJZCk7XG59O1xuZXhwb3J0cy5jcmVhdGVUcmFuc3BvcnRlclRvRG9tYWluQWNjb3VudDMyVHlwZSA9IGNyZWF0ZVRyYW5zcG9ydGVyVG9Eb21haW5BY2NvdW50MzJUeXBlO1xuY29uc3QgY3JlYXRlV2l0aGRyYXdTdGFrZUFsbCA9IChhcGkpID0+ICgwLCB0eXBlc18xLmNyZWF0ZVR5cGUpKGFwaS5yZWdpc3RyeSwgJ1BhbGxldERvbWFpbnNTdGFraW5nV2l0aGRyYXdTdGFrZScsIHsgQWxsOiBudWxsIH0pO1xuZXhwb3J0cy5jcmVhdGVXaXRoZHJhd1N0YWtlQWxsID0gY3JlYXRlV2l0aGRyYXdTdGFrZUFsbDtcbmNvbnN0IGNyZWF0ZVdpdGhkcmF3U3Rha2VCeVBlcmNlbnQgPSAoYXBpLCBwZXJjZW50KSA9PiAoMCwgdHlwZXNfMS5jcmVhdGVUeXBlKShhcGkucmVnaXN0cnksICdQYWxsZXREb21haW5zU3Rha2luZ1dpdGhkcmF3U3Rha2UnLCB7XG4gICAgUGVyY2VudDogcGVyY2VudCxcbn0pO1xuZXhwb3J0cy5jcmVhdGVXaXRoZHJhd1N0YWtlQnlQZXJjZW50ID0gY3JlYXRlV2l0aGRyYXdTdGFrZUJ5UGVyY2VudDtcbmNvbnN0IGNyZWF0ZVdpdGhkcmF3U3Rha2VCeVN0YWtlID0gKGFwaSwgc3Rha2UpID0+ICgwLCB0eXBlc18xLmNyZWF0ZVR5cGUpKGFwaS5yZWdpc3RyeSwgJ1BhbGxldERvbWFpbnNTdGFraW5nV2l0aGRyYXdTdGFrZScsIHsgU3Rha2U6IHN0YWtlIH0pO1xuZXhwb3J0cy5jcmVhdGVXaXRoZHJhd1N0YWtlQnlTdGFrZSA9IGNyZWF0ZVdpdGhkcmF3U3Rha2VCeVN0YWtlO1xuY29uc3QgY3JlYXRlV2l0aGRyYXdTdGFrZUJ5U2hhcmVzID0gKGFwaSwgc2hhcmVzKSA9PiAoMCwgdHlwZXNfMS5jcmVhdGVUeXBlKShhcGkucmVnaXN0cnksICdQYWxsZXREb21haW5zU3Rha2luZ1dpdGhkcmF3U3Rha2UnLCB7IFNoYXJlczogc2hhcmVzIH0pO1xuZXhwb3J0cy5jcmVhdGVXaXRoZHJhd1N0YWtlQnlTaGFyZXMgPSBjcmVhdGVXaXRoZHJhd1N0YWtlQnlTaGFyZXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/createType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/detectTxSuccess.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/detectTxSuccess.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/utils/detectTxSuccess.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.detectTxSuccess = void 0;\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js\");\n/**\n * Detects if a transaction was successful by checking for success events.\n *\n * This function examines the events emitted by a transaction to determine\n * if it was successful. It looks for events that are known to indicate\n * successful transaction execution, such as 'system.ExtrinsicSuccess'.\n *\n * @param events - Array of EventRecord objects emitted by the transaction.\n * @returns True if the transaction was successful, false otherwise.\n *\n * @example\n * import { detectTxSuccess } from '@autonomys/auto-utils'\n *\n * // Check transaction success from events\n * const events = [] // events from transaction result\n * const isSuccessful = detectTxSuccess(events)\n *\n * if (isSuccessful) {\n *   console.log('Transaction completed successfully')\n * } else {\n *   console.log('Transaction failed or had no success events')\n * }\n *\n * // Use with signAndSend result\n * tx.signAndSend(sender, (result) => {\n *   if (result.status.isInBlock) {\n *     const success = detectTxSuccess(result.events)\n *     console.log('Transaction success:', success)\n *   }\n * })\n */\nconst detectTxSuccess = (events) => {\n    events.forEach(({ event: { method, section } }) => {\n        if (events_1.expectSuccessfulTxEvent.indexOf(`${section}.${method}`) > -1)\n            return true;\n    });\n    return false;\n};\nexports.detectTxSuccess = detectTxSuccess;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvZGV0ZWN0VHhTdWNjZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGlCQUFpQixtQkFBTyxDQUFDLGlGQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHNCQUFzQixTQUFTLG1CQUFtQjtBQUNsRCx3REFBd0QsUUFBUSxHQUFHLE9BQU87QUFDMUU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvZGV0ZWN0VHhTdWNjZXNzLmpzPzNhNjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBmaWxlOiBzcmMvdXRpbHMvZGV0ZWN0VHhTdWNjZXNzLnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRldGVjdFR4U3VjY2VzcyA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xuLyoqXG4gKiBEZXRlY3RzIGlmIGEgdHJhbnNhY3Rpb24gd2FzIHN1Y2Nlc3NmdWwgYnkgY2hlY2tpbmcgZm9yIHN1Y2Nlc3MgZXZlbnRzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZXhhbWluZXMgdGhlIGV2ZW50cyBlbWl0dGVkIGJ5IGEgdHJhbnNhY3Rpb24gdG8gZGV0ZXJtaW5lXG4gKiBpZiBpdCB3YXMgc3VjY2Vzc2Z1bC4gSXQgbG9va3MgZm9yIGV2ZW50cyB0aGF0IGFyZSBrbm93biB0byBpbmRpY2F0ZVxuICogc3VjY2Vzc2Z1bCB0cmFuc2FjdGlvbiBleGVjdXRpb24sIHN1Y2ggYXMgJ3N5c3RlbS5FeHRyaW5zaWNTdWNjZXNzJy5cbiAqXG4gKiBAcGFyYW0gZXZlbnRzIC0gQXJyYXkgb2YgRXZlbnRSZWNvcmQgb2JqZWN0cyBlbWl0dGVkIGJ5IHRoZSB0cmFuc2FjdGlvbi5cbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHRyYW5zYWN0aW9uIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGRldGVjdFR4U3VjY2VzcyB9IGZyb20gJ0BhdXRvbm9teXMvYXV0by11dGlscydcbiAqXG4gKiAvLyBDaGVjayB0cmFuc2FjdGlvbiBzdWNjZXNzIGZyb20gZXZlbnRzXG4gKiBjb25zdCBldmVudHMgPSBbXSAvLyBldmVudHMgZnJvbSB0cmFuc2FjdGlvbiByZXN1bHRcbiAqIGNvbnN0IGlzU3VjY2Vzc2Z1bCA9IGRldGVjdFR4U3VjY2VzcyhldmVudHMpXG4gKlxuICogaWYgKGlzU3VjY2Vzc2Z1bCkge1xuICogICBjb25zb2xlLmxvZygnVHJhbnNhY3Rpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpXG4gKiB9IGVsc2Uge1xuICogICBjb25zb2xlLmxvZygnVHJhbnNhY3Rpb24gZmFpbGVkIG9yIGhhZCBubyBzdWNjZXNzIGV2ZW50cycpXG4gKiB9XG4gKlxuICogLy8gVXNlIHdpdGggc2lnbkFuZFNlbmQgcmVzdWx0XG4gKiB0eC5zaWduQW5kU2VuZChzZW5kZXIsIChyZXN1bHQpID0+IHtcbiAqICAgaWYgKHJlc3VsdC5zdGF0dXMuaXNJbkJsb2NrKSB7XG4gKiAgICAgY29uc3Qgc3VjY2VzcyA9IGRldGVjdFR4U3VjY2VzcyhyZXN1bHQuZXZlbnRzKVxuICogICAgIGNvbnNvbGUubG9nKCdUcmFuc2FjdGlvbiBzdWNjZXNzOicsIHN1Y2Nlc3MpXG4gKiAgIH1cbiAqIH0pXG4gKi9cbmNvbnN0IGRldGVjdFR4U3VjY2VzcyA9IChldmVudHMpID0+IHtcbiAgICBldmVudHMuZm9yRWFjaCgoeyBldmVudDogeyBtZXRob2QsIHNlY3Rpb24gfSB9KSA9PiB7XG4gICAgICAgIGlmIChldmVudHNfMS5leHBlY3RTdWNjZXNzZnVsVHhFdmVudC5pbmRleE9mKGAke3NlY3Rpb259LiR7bWV0aG9kfWApID4gLTEpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5kZXRlY3RUeFN1Y2Nlc3MgPSBkZXRlY3RUeFN1Y2Nlc3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/detectTxSuccess.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// file: src/utils/events.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.expectSuccessfulTxEvent = exports.eventsGroup = exports.eventName = void 0;\n/**\n * Creates a standardized event name by combining type and event name.\n *\n * This utility function creates consistent event names following the pattern\n * \"type.eventName\", which matches the format used by Polkadot.js for blockchain events.\n *\n * @param type - The event type category from the Type enum.\n * @param event - The specific event name within that category.\n * @returns A formatted event name string in the format \"type.event\".\n *\n * @example\n * import { eventName, Type } from '@autonomys/auto-utils'\n *\n * // Create system event names\n * const successEvent = eventName(Type.system, 'ExtrinsicSuccess')\n * console.log(successEvent) // Output: \"system.ExtrinsicSuccess\"\n *\n * const failureEvent = eventName(Type.system, 'ExtrinsicFailed')\n * console.log(failureEvent) // Output: \"system.ExtrinsicFailed\"\n *\n * // Use in event validation\n * const expectedEvents = [\n *   eventName(Type.system, 'ExtrinsicSuccess'),\n *   'balances.Transfer' // Can also use direct strings\n * ]\n */\n// Utility Function for Event Names\nconst eventName = (type, event) => `${type}.${event}`;\nexports.eventName = eventName;\n/**\n * Collection of system-level blockchain events.\n *\n * This object contains standardized names for system events that are common\n * across all Polkadot-based blockchains, providing easy access to frequently\n * used event names for transaction monitoring and validation.\n */\n// System Events\nconst system = {\n    failure: (0, exports.eventName)(\"system\" /* Type.system */, 'ExtrinsicFailed'),\n    newAccount: (0, exports.eventName)(\"system\" /* Type.system */, 'NewAccount'),\n    success: (0, exports.eventName)(\"system\" /* Type.system */, 'ExtrinsicSuccess'),\n};\n/**\n * Organized collection of event groups by category.\n *\n * This object provides structured access to different categories of blockchain\n * events, making it easier to reference and validate specific event types\n * in transaction monitoring and testing scenarios.\n *\n * @example\n * import { eventsGroup } from '@autonomys/auto-utils'\n *\n * // Access system events\n * console.log(eventsGroup.system.success) // Output: \"system.ExtrinsicSuccess\"\n * console.log(eventsGroup.system.failure) // Output: \"system.ExtrinsicFailed\"\n *\n * // Use in transaction validation\n * const expectedSystemEvents = [\n *   eventsGroup.system.success,\n *   eventsGroup.system.newAccount\n * ]\n */\n// Group of Events\nexports.eventsGroup = {\n    system,\n};\n/**\n * Default array of events expected for successful transactions.\n *\n * This array contains the standard events that indicate a transaction was\n * successfully executed. It's used as the default expected events list\n * in transaction signing and validation functions.\n *\n * @example\n * import { expectSuccessfulTxEvent, signAndSendTx } from '@autonomys/auto-utils'\n *\n * // Use as default expected events (this is automatic)\n * const result = await signAndSendTx(sender, tx)\n *\n * // Or explicitly specify (same as default)\n * const result2 = await signAndSendTx(sender, tx, {}, expectSuccessfulTxEvent)\n *\n * // Combine with custom events\n * const customExpectedEvents = [\n *   ...expectSuccessfulTxEvent,\n *   'balances.Transfer',\n *   'domains.OperatorNominated'\n * ]\n */\n// Export a default success event\nexports.expectSuccessfulTxEvent = [system.success];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsS0FBSyxHQUFHLE1BQU07QUFDcEQsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlDQUF5QztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvZXZlbnRzLmpzP2NiYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBmaWxlOiBzcmMvdXRpbHMvZXZlbnRzLnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cGVjdFN1Y2Nlc3NmdWxUeEV2ZW50ID0gZXhwb3J0cy5ldmVudHNHcm91cCA9IGV4cG9ydHMuZXZlbnROYW1lID0gdm9pZCAwO1xuLyoqXG4gKiBDcmVhdGVzIGEgc3RhbmRhcmRpemVkIGV2ZW50IG5hbWUgYnkgY29tYmluaW5nIHR5cGUgYW5kIGV2ZW50IG5hbWUuXG4gKlxuICogVGhpcyB1dGlsaXR5IGZ1bmN0aW9uIGNyZWF0ZXMgY29uc2lzdGVudCBldmVudCBuYW1lcyBmb2xsb3dpbmcgdGhlIHBhdHRlcm5cbiAqIFwidHlwZS5ldmVudE5hbWVcIiwgd2hpY2ggbWF0Y2hlcyB0aGUgZm9ybWF0IHVzZWQgYnkgUG9sa2Fkb3QuanMgZm9yIGJsb2NrY2hhaW4gZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB0eXBlIC0gVGhlIGV2ZW50IHR5cGUgY2F0ZWdvcnkgZnJvbSB0aGUgVHlwZSBlbnVtLlxuICogQHBhcmFtIGV2ZW50IC0gVGhlIHNwZWNpZmljIGV2ZW50IG5hbWUgd2l0aGluIHRoYXQgY2F0ZWdvcnkuXG4gKiBAcmV0dXJucyBBIGZvcm1hdHRlZCBldmVudCBuYW1lIHN0cmluZyBpbiB0aGUgZm9ybWF0IFwidHlwZS5ldmVudFwiLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBldmVudE5hbWUsIFR5cGUgfSBmcm9tICdAYXV0b25vbXlzL2F1dG8tdXRpbHMnXG4gKlxuICogLy8gQ3JlYXRlIHN5c3RlbSBldmVudCBuYW1lc1xuICogY29uc3Qgc3VjY2Vzc0V2ZW50ID0gZXZlbnROYW1lKFR5cGUuc3lzdGVtLCAnRXh0cmluc2ljU3VjY2VzcycpXG4gKiBjb25zb2xlLmxvZyhzdWNjZXNzRXZlbnQpIC8vIE91dHB1dDogXCJzeXN0ZW0uRXh0cmluc2ljU3VjY2Vzc1wiXG4gKlxuICogY29uc3QgZmFpbHVyZUV2ZW50ID0gZXZlbnROYW1lKFR5cGUuc3lzdGVtLCAnRXh0cmluc2ljRmFpbGVkJylcbiAqIGNvbnNvbGUubG9nKGZhaWx1cmVFdmVudCkgLy8gT3V0cHV0OiBcInN5c3RlbS5FeHRyaW5zaWNGYWlsZWRcIlxuICpcbiAqIC8vIFVzZSBpbiBldmVudCB2YWxpZGF0aW9uXG4gKiBjb25zdCBleHBlY3RlZEV2ZW50cyA9IFtcbiAqICAgZXZlbnROYW1lKFR5cGUuc3lzdGVtLCAnRXh0cmluc2ljU3VjY2VzcycpLFxuICogICAnYmFsYW5jZXMuVHJhbnNmZXInIC8vIENhbiBhbHNvIHVzZSBkaXJlY3Qgc3RyaW5nc1xuICogXVxuICovXG4vLyBVdGlsaXR5IEZ1bmN0aW9uIGZvciBFdmVudCBOYW1lc1xuY29uc3QgZXZlbnROYW1lID0gKHR5cGUsIGV2ZW50KSA9PiBgJHt0eXBlfS4ke2V2ZW50fWA7XG5leHBvcnRzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbi8qKlxuICogQ29sbGVjdGlvbiBvZiBzeXN0ZW0tbGV2ZWwgYmxvY2tjaGFpbiBldmVudHMuXG4gKlxuICogVGhpcyBvYmplY3QgY29udGFpbnMgc3RhbmRhcmRpemVkIG5hbWVzIGZvciBzeXN0ZW0gZXZlbnRzIHRoYXQgYXJlIGNvbW1vblxuICogYWNyb3NzIGFsbCBQb2xrYWRvdC1iYXNlZCBibG9ja2NoYWlucywgcHJvdmlkaW5nIGVhc3kgYWNjZXNzIHRvIGZyZXF1ZW50bHlcbiAqIHVzZWQgZXZlbnQgbmFtZXMgZm9yIHRyYW5zYWN0aW9uIG1vbml0b3JpbmcgYW5kIHZhbGlkYXRpb24uXG4gKi9cbi8vIFN5c3RlbSBFdmVudHNcbmNvbnN0IHN5c3RlbSA9IHtcbiAgICBmYWlsdXJlOiAoMCwgZXhwb3J0cy5ldmVudE5hbWUpKFwic3lzdGVtXCIgLyogVHlwZS5zeXN0ZW0gKi8sICdFeHRyaW5zaWNGYWlsZWQnKSxcbiAgICBuZXdBY2NvdW50OiAoMCwgZXhwb3J0cy5ldmVudE5hbWUpKFwic3lzdGVtXCIgLyogVHlwZS5zeXN0ZW0gKi8sICdOZXdBY2NvdW50JyksXG4gICAgc3VjY2VzczogKDAsIGV4cG9ydHMuZXZlbnROYW1lKShcInN5c3RlbVwiIC8qIFR5cGUuc3lzdGVtICovLCAnRXh0cmluc2ljU3VjY2VzcycpLFxufTtcbi8qKlxuICogT3JnYW5pemVkIGNvbGxlY3Rpb24gb2YgZXZlbnQgZ3JvdXBzIGJ5IGNhdGVnb3J5LlxuICpcbiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIHN0cnVjdHVyZWQgYWNjZXNzIHRvIGRpZmZlcmVudCBjYXRlZ29yaWVzIG9mIGJsb2NrY2hhaW5cbiAqIGV2ZW50cywgbWFraW5nIGl0IGVhc2llciB0byByZWZlcmVuY2UgYW5kIHZhbGlkYXRlIHNwZWNpZmljIGV2ZW50IHR5cGVzXG4gKiBpbiB0cmFuc2FjdGlvbiBtb25pdG9yaW5nIGFuZCB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgZXZlbnRzR3JvdXAgfSBmcm9tICdAYXV0b25vbXlzL2F1dG8tdXRpbHMnXG4gKlxuICogLy8gQWNjZXNzIHN5c3RlbSBldmVudHNcbiAqIGNvbnNvbGUubG9nKGV2ZW50c0dyb3VwLnN5c3RlbS5zdWNjZXNzKSAvLyBPdXRwdXQ6IFwic3lzdGVtLkV4dHJpbnNpY1N1Y2Nlc3NcIlxuICogY29uc29sZS5sb2coZXZlbnRzR3JvdXAuc3lzdGVtLmZhaWx1cmUpIC8vIE91dHB1dDogXCJzeXN0ZW0uRXh0cmluc2ljRmFpbGVkXCJcbiAqXG4gKiAvLyBVc2UgaW4gdHJhbnNhY3Rpb24gdmFsaWRhdGlvblxuICogY29uc3QgZXhwZWN0ZWRTeXN0ZW1FdmVudHMgPSBbXG4gKiAgIGV2ZW50c0dyb3VwLnN5c3RlbS5zdWNjZXNzLFxuICogICBldmVudHNHcm91cC5zeXN0ZW0ubmV3QWNjb3VudFxuICogXVxuICovXG4vLyBHcm91cCBvZiBFdmVudHNcbmV4cG9ydHMuZXZlbnRzR3JvdXAgPSB7XG4gICAgc3lzdGVtLFxufTtcbi8qKlxuICogRGVmYXVsdCBhcnJheSBvZiBldmVudHMgZXhwZWN0ZWQgZm9yIHN1Y2Nlc3NmdWwgdHJhbnNhY3Rpb25zLlxuICpcbiAqIFRoaXMgYXJyYXkgY29udGFpbnMgdGhlIHN0YW5kYXJkIGV2ZW50cyB0aGF0IGluZGljYXRlIGEgdHJhbnNhY3Rpb24gd2FzXG4gKiBzdWNjZXNzZnVsbHkgZXhlY3V0ZWQuIEl0J3MgdXNlZCBhcyB0aGUgZGVmYXVsdCBleHBlY3RlZCBldmVudHMgbGlzdFxuICogaW4gdHJhbnNhY3Rpb24gc2lnbmluZyBhbmQgdmFsaWRhdGlvbiBmdW5jdGlvbnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGV4cGVjdFN1Y2Nlc3NmdWxUeEV2ZW50LCBzaWduQW5kU2VuZFR4IH0gZnJvbSAnQGF1dG9ub215cy9hdXRvLXV0aWxzJ1xuICpcbiAqIC8vIFVzZSBhcyBkZWZhdWx0IGV4cGVjdGVkIGV2ZW50cyAodGhpcyBpcyBhdXRvbWF0aWMpXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduQW5kU2VuZFR4KHNlbmRlciwgdHgpXG4gKlxuICogLy8gT3IgZXhwbGljaXRseSBzcGVjaWZ5IChzYW1lIGFzIGRlZmF1bHQpXG4gKiBjb25zdCByZXN1bHQyID0gYXdhaXQgc2lnbkFuZFNlbmRUeChzZW5kZXIsIHR4LCB7fSwgZXhwZWN0U3VjY2Vzc2Z1bFR4RXZlbnQpXG4gKlxuICogLy8gQ29tYmluZSB3aXRoIGN1c3RvbSBldmVudHNcbiAqIGNvbnN0IGN1c3RvbUV4cGVjdGVkRXZlbnRzID0gW1xuICogICAuLi5leHBlY3RTdWNjZXNzZnVsVHhFdmVudCxcbiAqICAgJ2JhbGFuY2VzLlRyYW5zZmVyJyxcbiAqICAgJ2RvbWFpbnMuT3BlcmF0b3JOb21pbmF0ZWQnXG4gKiBdXG4gKi9cbi8vIEV4cG9ydCBhIGRlZmF1bHQgc3VjY2VzcyBldmVudFxuZXhwb3J0cy5leHBlY3RTdWNjZXNzZnVsVHhFdmVudCA9IFtzeXN0ZW0uc3VjY2Vzc107XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/format.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/format.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.u8aToHex = exports.stringToU8a = void 0;\nconst util_1 = __webpack_require__(/*! @polkadot/util */ \"(ssr)/./node_modules/@polkadot/util/index.js\");\nObject.defineProperty(exports, \"stringToU8a\", ({ enumerable: true, get: function () { return util_1.stringToU8a; } }));\nObject.defineProperty(exports, \"u8aToHex\", ({ enumerable: true, get: function () { return util_1.u8aToHex; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLG1CQUFtQjtBQUN0QyxlQUFlLG1CQUFPLENBQUMsb0VBQWdCO0FBQ3ZDLCtDQUE4QyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNwSCw0Q0FBMkMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3V0aWxzL2Zvcm1hdC5qcz9iYzBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51OGFUb0hleCA9IGV4cG9ydHMuc3RyaW5nVG9VOGEgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQHBvbGthZG90L3V0aWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdUb1U4YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLnN0cmluZ1RvVThhOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidThhVG9IZXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfMS51OGFUb0hleDsgfSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./createType */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/createType.js\"), exports);\n__exportStar(__webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js\"), exports);\n__exportStar(__webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/format.js\"), exports);\n__exportStar(__webpack_require__(/*! ./ready */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/ready.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sign */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/sign.js\"), exports);\n__exportStar(__webpack_require__(/*! ./signAndSendTx */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/signAndSendTx.js\"), exports);\n__exportStar(__webpack_require__(/*! ./validateEvents */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/validateEvents.js\"), exports);\n__exportStar(__webpack_require__(/*! ./verify */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/verify.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHlGQUFjO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxpRkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsaUZBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLCtFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyw2RUFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsK0ZBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyxpR0FBa0I7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLGlGQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXV0b25vbXlzLWVwb2NoLXJlYWRlci8uL25vZGVfbW9kdWxlcy9AYXV0b25vbXlzL2F1dG8tdXRpbHMvZGlzdC91dGlscy9pbmRleC5qcz9iYjY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3JlYXRlVHlwZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXZlbnRzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mb3JtYXRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlYWR5XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaWduXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaWduQW5kU2VuZFR4XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YWxpZGF0ZUV2ZW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdmVyaWZ5XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/ready.js":
/*!****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/ready.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cryptoWaitReady = void 0;\nconst util_crypto_1 = __webpack_require__(/*! @polkadot/util-crypto */ \"(ssr)/./node_modules/@polkadot/util-crypto/index.js\");\nObject.defineProperty(exports, \"cryptoWaitReady\", ({ enumerable: true, get: function () { return util_crypto_1.cryptoWaitReady; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvcmVhZHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLHNCQUFzQixtQkFBTyxDQUFDLGtGQUF1QjtBQUNyRCxtREFBa0QsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3V0aWxzL3JlYWR5LmpzP2Y2Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyeXB0b1dhaXRSZWFkeSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfY3J5cHRvXzEgPSByZXF1aXJlKFwiQHBvbGthZG90L3V0aWwtY3J5cHRvXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3J5cHRvV2FpdFJlYWR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsX2NyeXB0b18xLmNyeXB0b1dhaXRSZWFkeTsgfSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/ready.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/sign.js":
/*!***************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/sign.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.signatureVerify = exports.signingKey = exports.signMessage = void 0;\nconst util_crypto_1 = __webpack_require__(/*! @polkadot/util-crypto */ \"(ssr)/./node_modules/@polkadot/util-crypto/index.js\");\nObject.defineProperty(exports, \"signatureVerify\", ({ enumerable: true, get: function () { return util_crypto_1.signatureVerify; } }));\nconst format_1 = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/format.js\");\n/**\n * Signs arbitrary data using a Polkadot.js extension signer.\n *\n * This function uses the raw signing capability of a Polkadot.js extension to sign\n * arbitrary byte data. It's commonly used for authentication, message signing,\n * or creating signatures for off-chain verification.\n *\n * @param signer - The Polkadot.js extension signer interface.\n * @param address - The address of the account to sign with.\n * @param data - The data to sign as a string (will be encoded as bytes).\n * @returns Promise resolving to the signature result containing the signature and other metadata.\n *\n * @example\n * import { signMessage } from '@autonomys/auto-utils'\n * import { web3FromAddress } from '@polkadot/extension-dapp'\n *\n * // Sign a message with extension wallet\n * const address = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'\n * const injector = await web3FromAddress(address)\n *\n * const message = 'Hello, Autonomys Network!'\n * const signature = await signMessage(injector.signer, address, message)\n *\n * console.log('Signature:', signature.signature)\n * console.log('Signed by:', signature.id)\n *\n * // Sign authentication challenge\n * const challenge = `Login to dApp at ${Date.now()}`\n * const authSignature = await signMessage(injector.signer, address, challenge)\n *\n * // Use signature for verification later\n * const isValid = signatureVerify(challenge, authSignature.signature, address)\n * console.log('Signature valid:', isValid.isValid)\n *\n * @throws {Error} When the signer doesn't support raw signing or signing fails.\n */\nconst signMessage = (signer, address, data) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!signer.signRaw)\n        throw new Error('signRaw not available on the signer');\n    return yield signer.signRaw({\n        address,\n        type: 'bytes',\n        data,\n    });\n});\nexports.signMessage = signMessage;\n/**\n * Converts a public key to a hexadecimal string representation.\n *\n * This utility function converts a Uint8Array public key into its hexadecimal\n * string representation, which is useful for display, logging, or storage purposes.\n *\n * @param publicKey - The public key as a Uint8Array.\n * @returns The public key as a hexadecimal string with '0x' prefix.\n *\n * @example\n * import { signingKey } from '@autonomys/auto-utils'\n *\n * // Convert KeyringPair public key to hex\n * const wallet = setupWallet({ uri: '//Alice' })\n * const publicKeyHex = signingKey(wallet.keyringPair.publicKey)\n * console.log('Public key:', publicKeyHex) // Output: \"0x...\"\n *\n * // Use with signature verification\n * const publicKeyBytes = new Uint8Array(32) // 32-byte public key\n * const hexKey = signingKey(publicKeyBytes)\n * console.log('Hex public key:', hexKey)\n */\nconst signingKey = (publicKey) => (0, format_1.u8aToHex)(publicKey);\nexports.signingKey = signingKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvc2lnbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CO0FBQ2xFLHNCQUFzQixtQkFBTyxDQUFDLGtGQUF1QjtBQUNyRCxtREFBa0QsRUFBRSxxQ0FBcUMseUNBQXlDLEVBQUM7QUFDbkksaUJBQWlCLG1CQUFPLENBQUMsaUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUIsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFdBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3V0aWxzL3NpZ24uanM/MDkzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaWduYXR1cmVWZXJpZnkgPSBleHBvcnRzLnNpZ25pbmdLZXkgPSBleHBvcnRzLnNpZ25NZXNzYWdlID0gdm9pZCAwO1xuY29uc3QgdXRpbF9jcnlwdG9fMSA9IHJlcXVpcmUoXCJAcG9sa2Fkb3QvdXRpbC1jcnlwdG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaWduYXR1cmVWZXJpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfY3J5cHRvXzEuc2lnbmF0dXJlVmVyaWZ5OyB9IH0pO1xuY29uc3QgZm9ybWF0XzEgPSByZXF1aXJlKFwiLi9mb3JtYXRcIik7XG4vKipcbiAqIFNpZ25zIGFyYml0cmFyeSBkYXRhIHVzaW5nIGEgUG9sa2Fkb3QuanMgZXh0ZW5zaW9uIHNpZ25lci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHVzZXMgdGhlIHJhdyBzaWduaW5nIGNhcGFiaWxpdHkgb2YgYSBQb2xrYWRvdC5qcyBleHRlbnNpb24gdG8gc2lnblxuICogYXJiaXRyYXJ5IGJ5dGUgZGF0YS4gSXQncyBjb21tb25seSB1c2VkIGZvciBhdXRoZW50aWNhdGlvbiwgbWVzc2FnZSBzaWduaW5nLFxuICogb3IgY3JlYXRpbmcgc2lnbmF0dXJlcyBmb3Igb2ZmLWNoYWluIHZlcmlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gc2lnbmVyIC0gVGhlIFBvbGthZG90LmpzIGV4dGVuc2lvbiBzaWduZXIgaW50ZXJmYWNlLlxuICogQHBhcmFtIGFkZHJlc3MgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBzaWduIHdpdGguXG4gKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIHNpZ24gYXMgYSBzdHJpbmcgKHdpbGwgYmUgZW5jb2RlZCBhcyBieXRlcykuXG4gKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgc2lnbmF0dXJlIHJlc3VsdCBjb250YWluaW5nIHRoZSBzaWduYXR1cmUgYW5kIG90aGVyIG1ldGFkYXRhLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBzaWduTWVzc2FnZSB9IGZyb20gJ0BhdXRvbm9teXMvYXV0by11dGlscydcbiAqIGltcG9ydCB7IHdlYjNGcm9tQWRkcmVzcyB9IGZyb20gJ0Bwb2xrYWRvdC9leHRlbnNpb24tZGFwcCdcbiAqXG4gKiAvLyBTaWduIGEgbWVzc2FnZSB3aXRoIGV4dGVuc2lvbiB3YWxsZXRcbiAqIGNvbnN0IGFkZHJlc3MgPSAnNUdyd3ZhRUY1elhiMjZGejlyY1FwRFdTNTdDdEVSSHBOZWhYQ1BjTm9IR0t1dFFZJ1xuICogY29uc3QgaW5qZWN0b3IgPSBhd2FpdCB3ZWIzRnJvbUFkZHJlc3MoYWRkcmVzcylcbiAqXG4gKiBjb25zdCBtZXNzYWdlID0gJ0hlbGxvLCBBdXRvbm9teXMgTmV0d29yayEnXG4gKiBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzaWduTWVzc2FnZShpbmplY3Rvci5zaWduZXIsIGFkZHJlc3MsIG1lc3NhZ2UpXG4gKlxuICogY29uc29sZS5sb2coJ1NpZ25hdHVyZTonLCBzaWduYXR1cmUuc2lnbmF0dXJlKVxuICogY29uc29sZS5sb2coJ1NpZ25lZCBieTonLCBzaWduYXR1cmUuaWQpXG4gKlxuICogLy8gU2lnbiBhdXRoZW50aWNhdGlvbiBjaGFsbGVuZ2VcbiAqIGNvbnN0IGNoYWxsZW5nZSA9IGBMb2dpbiB0byBkQXBwIGF0ICR7RGF0ZS5ub3coKX1gXG4gKiBjb25zdCBhdXRoU2lnbmF0dXJlID0gYXdhaXQgc2lnbk1lc3NhZ2UoaW5qZWN0b3Iuc2lnbmVyLCBhZGRyZXNzLCBjaGFsbGVuZ2UpXG4gKlxuICogLy8gVXNlIHNpZ25hdHVyZSBmb3IgdmVyaWZpY2F0aW9uIGxhdGVyXG4gKiBjb25zdCBpc1ZhbGlkID0gc2lnbmF0dXJlVmVyaWZ5KGNoYWxsZW5nZSwgYXV0aFNpZ25hdHVyZS5zaWduYXR1cmUsIGFkZHJlc3MpXG4gKiBjb25zb2xlLmxvZygnU2lnbmF0dXJlIHZhbGlkOicsIGlzVmFsaWQuaXNWYWxpZClcbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gV2hlbiB0aGUgc2lnbmVyIGRvZXNuJ3Qgc3VwcG9ydCByYXcgc2lnbmluZyBvciBzaWduaW5nIGZhaWxzLlxuICovXG5jb25zdCBzaWduTWVzc2FnZSA9IChzaWduZXIsIGFkZHJlc3MsIGRhdGEpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGlmICghc2lnbmVyLnNpZ25SYXcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnblJhdyBub3QgYXZhaWxhYmxlIG9uIHRoZSBzaWduZXInKTtcbiAgICByZXR1cm4geWllbGQgc2lnbmVyLnNpZ25SYXcoe1xuICAgICAgICBhZGRyZXNzLFxuICAgICAgICB0eXBlOiAnYnl0ZXMnLFxuICAgICAgICBkYXRhLFxuICAgIH0pO1xufSk7XG5leHBvcnRzLnNpZ25NZXNzYWdlID0gc2lnbk1lc3NhZ2U7XG4vKipcbiAqIENvbnZlcnRzIGEgcHVibGljIGtleSB0byBhIGhleGFkZWNpbWFsIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBUaGlzIHV0aWxpdHkgZnVuY3Rpb24gY29udmVydHMgYSBVaW50OEFycmF5IHB1YmxpYyBrZXkgaW50byBpdHMgaGV4YWRlY2ltYWxcbiAqIHN0cmluZyByZXByZXNlbnRhdGlvbiwgd2hpY2ggaXMgdXNlZnVsIGZvciBkaXNwbGF5LCBsb2dnaW5nLCBvciBzdG9yYWdlIHB1cnBvc2VzLlxuICpcbiAqIEBwYXJhbSBwdWJsaWNLZXkgLSBUaGUgcHVibGljIGtleSBhcyBhIFVpbnQ4QXJyYXkuXG4gKiBAcmV0dXJucyBUaGUgcHVibGljIGtleSBhcyBhIGhleGFkZWNpbWFsIHN0cmluZyB3aXRoICcweCcgcHJlZml4LlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBzaWduaW5nS2V5IH0gZnJvbSAnQGF1dG9ub215cy9hdXRvLXV0aWxzJ1xuICpcbiAqIC8vIENvbnZlcnQgS2V5cmluZ1BhaXIgcHVibGljIGtleSB0byBoZXhcbiAqIGNvbnN0IHdhbGxldCA9IHNldHVwV2FsbGV0KHsgdXJpOiAnLy9BbGljZScgfSlcbiAqIGNvbnN0IHB1YmxpY0tleUhleCA9IHNpZ25pbmdLZXkod2FsbGV0LmtleXJpbmdQYWlyLnB1YmxpY0tleSlcbiAqIGNvbnNvbGUubG9nKCdQdWJsaWMga2V5OicsIHB1YmxpY0tleUhleCkgLy8gT3V0cHV0OiBcIjB4Li4uXCJcbiAqXG4gKiAvLyBVc2Ugd2l0aCBzaWduYXR1cmUgdmVyaWZpY2F0aW9uXG4gKiBjb25zdCBwdWJsaWNLZXlCeXRlcyA9IG5ldyBVaW50OEFycmF5KDMyKSAvLyAzMi1ieXRlIHB1YmxpYyBrZXlcbiAqIGNvbnN0IGhleEtleSA9IHNpZ25pbmdLZXkocHVibGljS2V5Qnl0ZXMpXG4gKiBjb25zb2xlLmxvZygnSGV4IHB1YmxpYyBrZXk6JywgaGV4S2V5KVxuICovXG5jb25zdCBzaWduaW5nS2V5ID0gKHB1YmxpY0tleSkgPT4gKDAsIGZvcm1hdF8xLnU4YVRvSGV4KShwdWJsaWNLZXkpO1xuZXhwb3J0cy5zaWduaW5nS2V5ID0gc2lnbmluZ0tleTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/sign.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/signAndSendTx.js":
/*!************************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/signAndSendTx.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// file: src/utils/signAndSendTx.ts\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.signAndSendTx = void 0;\nconst detectTxSuccess_1 = __webpack_require__(/*! ./detectTxSuccess */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/detectTxSuccess.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js\");\nconst validateEvents_1 = __webpack_require__(/*! ./validateEvents */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/validateEvents.js\");\n/**\n * Signs and sends a transaction to the Autonomys Network, with comprehensive error handling and event validation.\n *\n * This function handles the complete transaction lifecycle: signing, sending, monitoring for inclusion,\n * and validating expected events. It provides detailed error handling and supports custom error mapping\n * for domain-specific error handling. The function waits for the transaction to be included in a block\n * and validates that expected events were emitted.\n *\n * @param sender - The account to sign and send the transaction. Can be a KeyringPair, address string, or AddressOrPair.\n * @param tx - The submittable extrinsic to sign and send.\n * @param options - Optional signer options including nonce, tip, and other transaction parameters.\n * @param eventsExpected - Array of expected event names to validate. Defaults to successful transaction events.\n * @param log - Whether to log transaction progress to console. Defaults to false.\n * @param mapErrorCodeToEnum - Optional function to map error codes to custom error enums for better error handling.\n * @returns Promise resolving to transaction results including success status, hashes, events, and receipt.\n *\n * @example\n * import { signAndSendTx, activate, setupWallet } from '@autonomys/auto-utils'\n *\n * // Basic transaction signing and sending\n * const api = await activate({ networkId: 'taurus' })\n * const wallet = setupWallet({ uri: '//Alice' })\n *\n * const tx = api.tx.balances.transfer('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY', 1000000000000000000n)\n *\n * const result = await signAndSendTx(wallet.keyringPair, tx)\n * if (result.success) {\n *   console.log('Transaction successful')\n *   console.log('Transaction hash:', result.txHash)\n *   console.log('Block hash:', result.blockHash)\n * }\n *\n * // With custom options and event validation\n * const transferTx = api.tx.balances.transfer(receiverAddress, amount)\n * const transferResult = await signAndSendTx(\n *   senderKeyringPair,\n *   transferTx,\n *   { tip: 1000000000000000n }, // Custom tip\n *   ['balances.Transfer'], // Expected events\n *   true // Enable logging\n * )\n *\n * // With error mapping for custom error handling\n * const stakingTx = api.tx.domains.nominateOperator(operatorId, amount)\n * const stakingResult = await signAndSendTx(\n *   nominatorKeyringPair,\n *   stakingTx,\n *   {},\n *   ['domains.OperatorNominated'],\n *   false,\n *   (errorCode) => {\n *     // Map error codes to custom error types\n *     switch (errorCode) {\n *       case '0': return 'InsufficientBalance'\n *       case '1': return 'OperatorNotFound'\n *       default: return undefined\n *     }\n *   }\n * )\n *\n * // Handle Auto-ID registration with identifier extraction\n * const autoIdTx = api.tx.autoId.registerAutoId(autoIdData)\n * const autoIdResult = await signAndSendTx(sender, autoIdTx)\n * if (autoIdResult.identifier) {\n *   console.log('Auto-ID registered with identifier:', autoIdResult.identifier)\n * }\n *\n * @throws {Error} When the transaction fails, times out, or expected events are not found.\n * @throws {Error} When the transaction is retracted, dropped, or invalid.\n * @throws {Error} When custom error mapping indicates a specific error condition.\n */\nconst signAndSendTx = (sender_1, tx_1, ...args_1) => __awaiter(void 0, [sender_1, tx_1, ...args_1], void 0, function* (sender, tx, options = {}, eventsExpected = events_1.expectSuccessfulTxEvent, log = false, mapErrorCodeToEnum) {\n    let success = false;\n    let txHashHex = undefined;\n    let blockHash = undefined;\n    const eventsValidated = { expected: [], found: [] };\n    let identifier = null;\n    const receipt = yield new Promise((resolve, reject) => {\n        tx.signAndSend(sender, options, (result) => __awaiter(void 0, void 0, void 0, function* () {\n            const { events = [], status, dispatchError } = result;\n            if (status.isInBlock || status.isFinalized) {\n                txHashHex = result.txHash.toHex();\n                blockHash = status.isInBlock ? status.asInBlock.toHex() : status.asFinalized.toHex();\n                if (log)\n                    console.log('Successful tx', txHashHex, 'in block', blockHash);\n                success = (0, detectTxSuccess_1.detectTxSuccess)(events);\n                if (eventsExpected.length > 0) {\n                    const _events = (0, validateEvents_1.validateEvents)(events, eventsExpected, txHashHex, blockHash, log);\n                    if (_events.expected.length === 0)\n                        resolve(result);\n                    else\n                        reject(new Error('Events not found'));\n                }\n                else {\n                    try {\n                        events.forEach(({ event: { section, method, data } }) => {\n                            if (section === 'system' && method === 'ExtrinsicFailed') {\n                                const dispatchErrorJson = JSON.parse(dispatchError.toString());\n                                const errorEnum = mapErrorCodeToEnum === null || mapErrorCodeToEnum === void 0 ? void 0 : mapErrorCodeToEnum(dispatchErrorJson.module.error);\n                                reject(new Error(`Extrinsic failed: ${errorEnum} in block #${blockHash} with error: ${dispatchErrorJson}`));\n                            }\n                            if (section === 'autoId' && method === 'NewAutoIdRegistered') {\n                                identifier = data[0].toString();\n                            }\n                        });\n                        resolve(result);\n                    }\n                    catch (err) {\n                        reject(new Error(`Failed to retrieve block information: ${err instanceof Error ? err.message : String(err)}`));\n                    }\n                }\n            }\n            else if (status.isRetracted ||\n                status.isFinalityTimeout ||\n                status.isDropped ||\n                status.isInvalid) {\n                if (log)\n                    console.error('Transaction failed');\n                reject(new Error('Transaction failed'));\n            }\n        }));\n    });\n    return { success, txHash: txHashHex, blockHash, events: eventsValidated, receipt, identifier };\n});\nexports.signAndSendTx = signAndSendTx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/signAndSendTx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/validateEvents.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/validateEvents.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// file: src/utils/validateEvents.ts\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateEvents = void 0;\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/events.js\");\n/**\n * Validates that expected blockchain events were emitted during transaction execution.\n *\n * This function checks if all expected events were found in the transaction's event list.\n * It's essential for ensuring that transactions not only succeeded but also produced\n * the specific side effects (events) that were expected. The function supports both\n * string and nested array formats for expected events.\n *\n * @param events - Array of EventRecord objects emitted by the transaction.\n * @param eventsExpected - Expected events in various formats (string, array of strings, or nested arrays).\n * @param tx - Transaction hash for logging purposes.\n * @param block - Block hash where the transaction was included for logging purposes.\n * @param log - Whether to log unexpected events and missing events. Defaults to false.\n * @returns EventsValidated object containing arrays of expected (missing) and found events.\n *\n * @example\n * import { validateEvents, expectSuccessfulTxEvent } from '@autonomys/auto-utils'\n *\n * // Basic validation with system success events\n * const events = [] // event records from transaction\n * const validation = validateEvents(\n *   events,\n *   expectSuccessfulTxEvent,\n *   '0x1234...', // transaction hash\n *   '0x5678...', // block hash\n *   true // enable logging\n * )\n *\n * if (validation.expected.length === 0) {\n *   console.log('All expected events found:', validation.found)\n * } else {\n *   console.log('Missing events:', validation.expected)\n * }\n *\n * // Validate multiple specific events\n * const transferValidation = validateEvents(\n *   events,\n *   ['system.ExtrinsicSuccess', 'balances.Transfer'],\n *   txHash,\n *   blockHash\n * )\n *\n * // Validate complex event patterns\n * const stakingValidation = validateEvents(\n *   events,\n *   [\n *     'system.ExtrinsicSuccess',\n *     ['domains.OperatorNominated', 'domains.StakeAdded'], // Either of these\n *     'balances.Transfer'\n *   ],\n *   txHash,\n *   blockHash,\n *   true\n * )\n *\n * // Use in transaction monitoring\n * const expectedDomainEvents = [\n *   'system.ExtrinsicSuccess',\n *   'domains.DomainInstantiated',\n *   'balances.Transfer'\n * ]\n * const domainValidation = validateEvents(events, expectedDomainEvents, txHash, blockHash)\n *\n * // Check if validation passed\n * const isValid = domainValidation.expected.length === 0\n * console.log('Domain creation valid:', isValid)\n */\nconst validateEvents = (events, eventsExpected = events_1.expectSuccessfulTxEvent, tx, block, log = false) => {\n    const _eventsExpected = typeof eventsExpected === 'string'\n        ? [eventsExpected]\n        : eventsExpected.reduce((acc, e) => acc.concat(typeof e === 'string' ? [e] : e), []);\n    const found = [];\n    events.forEach(({ event: { method, section } }) => {\n        const index = _eventsExpected.indexOf(`${section}.${method}`);\n        if (index > -1) {\n            _eventsExpected.splice(index, 1);\n            found.push(`${section}.${method}`);\n        }\n        else if (log)\n            console.log('Event not expected', `${section}.${method}`, 'tx', tx, 'block', block);\n    });\n    if (_eventsExpected.length > 0)\n        console.log('Events not found', _eventsExpected, 'tx', tx, 'block', block);\n    return { expected: _eventsExpected, found };\n};\nexports.validateEvents = validateEvents;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvdmFsaWRhdGVFdmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsaUJBQWlCLG1CQUFPLENBQUMsaUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBDQUEwQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFNBQVMsbUJBQW1CO0FBQ2xELGlEQUFpRCxRQUFRLEdBQUcsT0FBTztBQUNuRTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVEsR0FBRyxPQUFPO0FBQzVDO0FBQ0E7QUFDQSxpREFBaUQsUUFBUSxHQUFHLE9BQU87QUFDbkUsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hdXRvbm9teXMtZXBvY2gtcmVhZGVyLy4vbm9kZV9tb2R1bGVzL0BhdXRvbm9teXMvYXV0by11dGlscy9kaXN0L3V0aWxzL3ZhbGlkYXRlRXZlbnRzLmpzPzg4YjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBmaWxlOiBzcmMvdXRpbHMvdmFsaWRhdGVFdmVudHMudHNcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVFdmVudHMgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCIuL2V2ZW50c1wiKTtcbi8qKlxuICogVmFsaWRhdGVzIHRoYXQgZXhwZWN0ZWQgYmxvY2tjaGFpbiBldmVudHMgd2VyZSBlbWl0dGVkIGR1cmluZyB0cmFuc2FjdGlvbiBleGVjdXRpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgYWxsIGV4cGVjdGVkIGV2ZW50cyB3ZXJlIGZvdW5kIGluIHRoZSB0cmFuc2FjdGlvbidzIGV2ZW50IGxpc3QuXG4gKiBJdCdzIGVzc2VudGlhbCBmb3IgZW5zdXJpbmcgdGhhdCB0cmFuc2FjdGlvbnMgbm90IG9ubHkgc3VjY2VlZGVkIGJ1dCBhbHNvIHByb2R1Y2VkXG4gKiB0aGUgc3BlY2lmaWMgc2lkZSBlZmZlY3RzIChldmVudHMpIHRoYXQgd2VyZSBleHBlY3RlZC4gVGhlIGZ1bmN0aW9uIHN1cHBvcnRzIGJvdGhcbiAqIHN0cmluZyBhbmQgbmVzdGVkIGFycmF5IGZvcm1hdHMgZm9yIGV4cGVjdGVkIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0gZXZlbnRzIC0gQXJyYXkgb2YgRXZlbnRSZWNvcmQgb2JqZWN0cyBlbWl0dGVkIGJ5IHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSBldmVudHNFeHBlY3RlZCAtIEV4cGVjdGVkIGV2ZW50cyBpbiB2YXJpb3VzIGZvcm1hdHMgKHN0cmluZywgYXJyYXkgb2Ygc3RyaW5ncywgb3IgbmVzdGVkIGFycmF5cykuXG4gKiBAcGFyYW0gdHggLSBUcmFuc2FjdGlvbiBoYXNoIGZvciBsb2dnaW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIGJsb2NrIC0gQmxvY2sgaGFzaCB3aGVyZSB0aGUgdHJhbnNhY3Rpb24gd2FzIGluY2x1ZGVkIGZvciBsb2dnaW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIGxvZyAtIFdoZXRoZXIgdG8gbG9nIHVuZXhwZWN0ZWQgZXZlbnRzIGFuZCBtaXNzaW5nIGV2ZW50cy4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gKiBAcmV0dXJucyBFdmVudHNWYWxpZGF0ZWQgb2JqZWN0IGNvbnRhaW5pbmcgYXJyYXlzIG9mIGV4cGVjdGVkIChtaXNzaW5nKSBhbmQgZm91bmQgZXZlbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyB2YWxpZGF0ZUV2ZW50cywgZXhwZWN0U3VjY2Vzc2Z1bFR4RXZlbnQgfSBmcm9tICdAYXV0b25vbXlzL2F1dG8tdXRpbHMnXG4gKlxuICogLy8gQmFzaWMgdmFsaWRhdGlvbiB3aXRoIHN5c3RlbSBzdWNjZXNzIGV2ZW50c1xuICogY29uc3QgZXZlbnRzID0gW10gLy8gZXZlbnQgcmVjb3JkcyBmcm9tIHRyYW5zYWN0aW9uXG4gKiBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGVFdmVudHMoXG4gKiAgIGV2ZW50cyxcbiAqICAgZXhwZWN0U3VjY2Vzc2Z1bFR4RXZlbnQsXG4gKiAgICcweDEyMzQuLi4nLCAvLyB0cmFuc2FjdGlvbiBoYXNoXG4gKiAgICcweDU2NzguLi4nLCAvLyBibG9jayBoYXNoXG4gKiAgIHRydWUgLy8gZW5hYmxlIGxvZ2dpbmdcbiAqIClcbiAqXG4gKiBpZiAodmFsaWRhdGlvbi5leHBlY3RlZC5sZW5ndGggPT09IDApIHtcbiAqICAgY29uc29sZS5sb2coJ0FsbCBleHBlY3RlZCBldmVudHMgZm91bmQ6JywgdmFsaWRhdGlvbi5mb3VuZClcbiAqIH0gZWxzZSB7XG4gKiAgIGNvbnNvbGUubG9nKCdNaXNzaW5nIGV2ZW50czonLCB2YWxpZGF0aW9uLmV4cGVjdGVkKVxuICogfVxuICpcbiAqIC8vIFZhbGlkYXRlIG11bHRpcGxlIHNwZWNpZmljIGV2ZW50c1xuICogY29uc3QgdHJhbnNmZXJWYWxpZGF0aW9uID0gdmFsaWRhdGVFdmVudHMoXG4gKiAgIGV2ZW50cyxcbiAqICAgWydzeXN0ZW0uRXh0cmluc2ljU3VjY2VzcycsICdiYWxhbmNlcy5UcmFuc2ZlciddLFxuICogICB0eEhhc2gsXG4gKiAgIGJsb2NrSGFzaFxuICogKVxuICpcbiAqIC8vIFZhbGlkYXRlIGNvbXBsZXggZXZlbnQgcGF0dGVybnNcbiAqIGNvbnN0IHN0YWtpbmdWYWxpZGF0aW9uID0gdmFsaWRhdGVFdmVudHMoXG4gKiAgIGV2ZW50cyxcbiAqICAgW1xuICogICAgICdzeXN0ZW0uRXh0cmluc2ljU3VjY2VzcycsXG4gKiAgICAgWydkb21haW5zLk9wZXJhdG9yTm9taW5hdGVkJywgJ2RvbWFpbnMuU3Rha2VBZGRlZCddLCAvLyBFaXRoZXIgb2YgdGhlc2VcbiAqICAgICAnYmFsYW5jZXMuVHJhbnNmZXInXG4gKiAgIF0sXG4gKiAgIHR4SGFzaCxcbiAqICAgYmxvY2tIYXNoLFxuICogICB0cnVlXG4gKiApXG4gKlxuICogLy8gVXNlIGluIHRyYW5zYWN0aW9uIG1vbml0b3JpbmdcbiAqIGNvbnN0IGV4cGVjdGVkRG9tYWluRXZlbnRzID0gW1xuICogICAnc3lzdGVtLkV4dHJpbnNpY1N1Y2Nlc3MnLFxuICogICAnZG9tYWlucy5Eb21haW5JbnN0YW50aWF0ZWQnLFxuICogICAnYmFsYW5jZXMuVHJhbnNmZXInXG4gKiBdXG4gKiBjb25zdCBkb21haW5WYWxpZGF0aW9uID0gdmFsaWRhdGVFdmVudHMoZXZlbnRzLCBleHBlY3RlZERvbWFpbkV2ZW50cywgdHhIYXNoLCBibG9ja0hhc2gpXG4gKlxuICogLy8gQ2hlY2sgaWYgdmFsaWRhdGlvbiBwYXNzZWRcbiAqIGNvbnN0IGlzVmFsaWQgPSBkb21haW5WYWxpZGF0aW9uLmV4cGVjdGVkLmxlbmd0aCA9PT0gMFxuICogY29uc29sZS5sb2coJ0RvbWFpbiBjcmVhdGlvbiB2YWxpZDonLCBpc1ZhbGlkKVxuICovXG5jb25zdCB2YWxpZGF0ZUV2ZW50cyA9IChldmVudHMsIGV2ZW50c0V4cGVjdGVkID0gZXZlbnRzXzEuZXhwZWN0U3VjY2Vzc2Z1bFR4RXZlbnQsIHR4LCBibG9jaywgbG9nID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBfZXZlbnRzRXhwZWN0ZWQgPSB0eXBlb2YgZXZlbnRzRXhwZWN0ZWQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gW2V2ZW50c0V4cGVjdGVkXVxuICAgICAgICA6IGV2ZW50c0V4cGVjdGVkLnJlZHVjZSgoYWNjLCBlKSA9PiBhY2MuY29uY2F0KHR5cGVvZiBlID09PSAnc3RyaW5nJyA/IFtlXSA6IGUpLCBbXSk7XG4gICAgY29uc3QgZm91bmQgPSBbXTtcbiAgICBldmVudHMuZm9yRWFjaCgoeyBldmVudDogeyBtZXRob2QsIHNlY3Rpb24gfSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gX2V2ZW50c0V4cGVjdGVkLmluZGV4T2YoYCR7c2VjdGlvbn0uJHttZXRob2R9YCk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBfZXZlbnRzRXhwZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGZvdW5kLnB1c2goYCR7c2VjdGlvbn0uJHttZXRob2R9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobG9nKVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0V2ZW50IG5vdCBleHBlY3RlZCcsIGAke3NlY3Rpb259LiR7bWV0aG9kfWAsICd0eCcsIHR4LCAnYmxvY2snLCBibG9jayk7XG4gICAgfSk7XG4gICAgaWYgKF9ldmVudHNFeHBlY3RlZC5sZW5ndGggPiAwKVxuICAgICAgICBjb25zb2xlLmxvZygnRXZlbnRzIG5vdCBmb3VuZCcsIF9ldmVudHNFeHBlY3RlZCwgJ3R4JywgdHgsICdibG9jaycsIGJsb2NrKTtcbiAgICByZXR1cm4geyBleHBlY3RlZDogX2V2ZW50c0V4cGVjdGVkLCBmb3VuZCB9O1xufTtcbmV4cG9ydHMudmFsaWRhdGVFdmVudHMgPSB2YWxpZGF0ZUV2ZW50cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/validateEvents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/verify.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/utils/verify.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isHex = exports.isAddress = void 0;\nconst util_1 = __webpack_require__(/*! @polkadot/util */ \"(ssr)/./node_modules/@polkadot/util/index.js\");\nObject.defineProperty(exports, \"isHex\", ({ enumerable: true, get: function () { return util_1.isHex; } }));\nconst util_crypto_1 = __webpack_require__(/*! @polkadot/util-crypto */ \"(ssr)/./node_modules/@polkadot/util-crypto/index.js\");\nObject.defineProperty(exports, \"isAddress\", ({ enumerable: true, get: function () { return util_crypto_1.isAddress; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvdmVyaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsR0FBRyxpQkFBaUI7QUFDakMsZUFBZSxtQkFBTyxDQUFDLG9FQUFnQjtBQUN2Qyx5Q0FBd0MsRUFBRSxxQ0FBcUMsd0JBQXdCLEVBQUM7QUFDeEcsc0JBQXNCLG1CQUFPLENBQUMsa0ZBQXVCO0FBQ3JELDZDQUE0QyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9ub215cy1lcG9jaC1yZWFkZXIvLi9ub2RlX21vZHVsZXMvQGF1dG9ub215cy9hdXRvLXV0aWxzL2Rpc3QvdXRpbHMvdmVyaWZ5LmpzPzlhNjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSGV4ID0gZXhwb3J0cy5pc0FkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQHBvbGthZG90L3V0aWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0hleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbF8xLmlzSGV4OyB9IH0pO1xuY29uc3QgdXRpbF9jcnlwdG9fMSA9IHJlcXVpcmUoXCJAcG9sa2Fkb3QvdXRpbC1jcnlwdG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0FkZHJlc3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfY3J5cHRvXzEuaXNBZGRyZXNzOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/utils/verify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@autonomys/auto-utils/dist/wallet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@autonomys/auto-utils/dist/wallet.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// file: src/wallet.ts\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMockWallet = exports.mockWallets = exports.activateWallet = exports.generateWallet = exports.setupWallet = void 0;\nconst api_1 = __webpack_require__(/*! @polkadot/api */ \"(ssr)/./node_modules/@polkadot/api/index.js\");\nconst util_crypto_1 = __webpack_require__(/*! @polkadot/util-crypto */ \"(ssr)/./node_modules/@polkadot/util-crypto/index.js\");\nconst address_1 = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/address.js\");\nconst api_2 = __webpack_require__(/*! ./api */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/api.js\");\nconst network_1 = __webpack_require__(/*! ./constants/network */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/network.js\");\nconst wallet_1 = __webpack_require__(/*! ./constants/wallet */ \"(ssr)/./node_modules/@autonomys/auto-utils/dist/constants/wallet.js\");\n/**\n * Sets up a wallet from a mnemonic phrase or derivation URI.\n *\n * This function creates a KeyringPair from either a mnemonic phrase or a derivation\n * URI (like //Alice for development). It supports different key types including\n * sr25519 (default) and ethereum for cross-chain compatibility.\n *\n * @param params - Wallet setup parameters containing either mnemonic or URI, plus optional key type.\n * @returns A Wallet object containing the KeyringPair and standardized addresses.\n *\n * @example\n * import { setupWallet } from '@autonomys/auto-utils'\n *\n * // Setup wallet from mnemonic (sr25519 default)\n * const wallet = setupWallet({\n *   mnemonic: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'\n * })\n * console.log(wallet.address) // Standardized Autonomys address\n * console.log(wallet.commonAddress) // Original address format\n *\n * // Setup wallet with ethereum key type\n * const ethWallet = setupWallet({\n *   mnemonic: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about',\n *   type: 'ethereum'\n * })\n * console.log(ethWallet.address) // Ethereum-format address (0x...)\n *\n * // Setup development wallet from URI\n * const aliceWallet = setupWallet({ uri: '//Alice' })\n * console.log(aliceWallet.address) // Alice's development address\n *\n * // Setup with custom derivation path\n * const customWallet = setupWallet({\n *   uri: '//Alice/stash'\n * })\n *\n * @throws {Error} When neither mnemonic nor URI is provided, or when the input is invalid.\n */\nconst setupWallet = (params) => {\n    const type = params.type || 'sr25519';\n    const keyring = new api_1.Keyring({ type });\n    let keyringPair;\n    if (params.uri) {\n        // Treat as uri\n        keyringPair = keyring.addFromUri(params.uri);\n    }\n    else if (params.mnemonic) {\n        // Treat as mnemonic\n        keyringPair = keyring.addFromUri(params.mnemonic);\n    }\n    else\n        throw new Error('Invalid mnemonic or private key');\n    return {\n        keyringPair,\n        address: type === 'sr25519' ? (0, address_1.address)(keyringPair.address) : keyringPair.address,\n        commonAddress: keyringPair.address,\n    };\n};\nexports.setupWallet = setupWallet;\n/**\n * Generates a new wallet with a random mnemonic phrase.\n *\n * This function creates a brand new wallet by generating a cryptographically secure\n * mnemonic phrase and deriving the corresponding KeyringPair. It's useful for creating\n * new user accounts or generating test wallets.\n *\n * @param type - The cryptographic key type to use. Defaults to 'sr25519'.\n * @returns A GeneratedWallet object containing the mnemonic, KeyringPair, and addresses.\n *\n * @example\n * import { generateWallet } from '@autonomys/auto-utils'\n *\n * // Generate new sr25519 wallet (default)\n * const newWallet = generateWallet()\n * console.log(newWallet.mnemonic) // 12-word mnemonic phrase\n * console.log(newWallet.address) // Standardized Autonomys address\n * console.log(newWallet.commonAddress) // Original address format\n *\n * // Generate ethereum-compatible wallet\n * const ethWallet = generateWallet('ethereum')\n * console.log(ethWallet.mnemonic) // Same 12-word mnemonic\n * console.log(ethWallet.address) // Ethereum-format address (0x...)\n *\n * // Store the mnemonic securely for later use\n * const mnemonic = newWallet.mnemonic\n * // Use setupWallet later to recreate the same wallet\n * const restoredWallet = setupWallet({ mnemonic })\n * console.log(restoredWallet.address === newWallet.address) // true\n */\nconst generateWallet = (type = 'sr25519') => {\n    const mnemonic = (0, util_crypto_1.mnemonicGenerate)();\n    const { keyringPair, address, commonAddress } = (0, exports.setupWallet)({ mnemonic, type });\n    return {\n        mnemonic,\n        keyringPair,\n        address,\n        commonAddress,\n    };\n};\nexports.generateWallet = generateWallet;\n/**\n * Activates a wallet and establishes connection to the Autonomys Network or domain.\n *\n * This comprehensive function handles wallet activation in both Node.js and browser\n * environments. It can work with mnemonic phrases, URIs, or browser extensions,\n * and automatically establishes the appropriate API connection.\n *\n * @param params - Wallet activation parameters including credentials, network, and options.\n * @returns A WalletActivated object containing the API connection and account information.\n *\n * @example\n * import { activateWallet } from '@autonomys/auto-utils'\n *\n * // Activate wallet with mnemonic on mainnet\n * const { api, accounts } = await activateWallet({\n *   mnemonic: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'\n * })\n * console.log('Connected to mainnet')\n * console.log('Account address:', accounts[0].address)\n *\n * // Activate on specific network\n * const { api: taurusApi, accounts: taurusAccounts } = await activateWallet({\n *   mnemonic: 'your mnemonic here',\n *   networkId: 'taurus'\n * })\n *\n * // Activate on domain\n * const { api: domainApi, accounts: domainAccounts } = await activateWallet({\n *   uri: '//Alice',\n *   networkId: 'taurus',\n *   domainId: '0' // Auto-EVM domain\n * })\n *\n * // Activate with ethereum key type\n * const { api: ethApi, accounts: ethAccounts } = await activateWallet({\n *   mnemonic: 'your mnemonic here',\n *   networkId: 'taurus',\n *   type: 'ethereum'\n * })\n *\n * // Use with existing API instance\n * import { activate } from '@autonomys/auto-utils'\n * const existingApi = await activate({ networkId: 'mainnet' })\n * const { accounts } = await activateWallet({\n *   uri: '//Bob',\n *   api: existingApi\n * })\n *\n * // Always disconnect when done\n * await api.disconnect()\n *\n * @throws {Error} When no wallet credentials are provided or connection fails.\n */\nconst activateWallet = (params) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!params.api) {\n        // Create the API instance if not provided\n        params.api =\n            params.domainId === undefined\n                ? yield (0, api_2.activate)(params)\n                : yield (0, api_2.activateDomain)(params);\n    }\n    const accounts = [];\n    if (params.mnemonic || params.uri) {\n        // Attach the wallet in a node environment\n        const { keyringPair } = (0, exports.setupWallet)(params);\n        if (keyringPair)\n            accounts.push(keyringPair);\n    }\n    else if (typeof window !== 'undefined') {\n        const { web3Enable, web3Accounts } = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! @polkadot/extension-dapp */ \"(ssr)/./node_modules/@polkadot/extension-dapp/index.js\")));\n        // Enable Polkadot.js extension in the browser\n        yield web3Enable(params.appName || 'Auto');\n        // Get the list of accounts from the extension\n        const allAccounts = yield web3Accounts();\n        accounts.push(...allAccounts);\n        if (allAccounts.length === 0)\n            console.warn('No accounts found in the Polkadot.js extension');\n    }\n    else\n        throw new Error('No wallet provided');\n    return {\n        api: params.api,\n        accounts,\n        address: params.type && params.type === 'ethereum'\n            ? accounts[0].address\n            : (0, address_1.address)(accounts[0].address),\n    };\n});\nexports.activateWallet = activateWallet;\n/**\n * Creates a collection of mock wallets for testing and development purposes.\n *\n * This function generates wallets for all predefined development accounts\n * (Alice, Bob, Charlie, Dave, etc.) and establishes connections to the specified\n * network. It's essential for testing applications and running development scenarios.\n *\n * @param network - Network parameters specifying which network to connect to. Defaults to mainnet.\n * @param api - Optional existing API instance to reuse. If not provided, creates new connections.\n * @param type - The cryptographic key type to use for all mock wallets. Defaults to 'sr25519'.\n * @returns Promise resolving to an array of WalletActivated objects for all mock accounts.\n *\n * @example\n * import { mockWallets, activate } from '@autonomys/auto-utils'\n *\n * // Create mock wallets for mainnet\n * const wallets = await mockWallets()\n * console.log('Created', wallets.length, 'mock wallets')\n *\n * // Create mock wallets for testnet\n * const testWallets = await mockWallets({ networkId: 'taurus' })\n *\n * // Create mock wallets with existing API\n * const api = await activate({ networkId: 'localhost' })\n * const localWallets = await mockWallets({ networkId: 'localhost' }, api)\n *\n * // Create ethereum-type mock wallets\n * const ethWallets = await mockWallets(\n *   { networkId: 'taurus' },\n *   undefined,\n *   'ethereum'\n * )\n *\n * // Use specific mock wallet\n * const aliceWallet = wallets[0] // Alice is always first\n * const bobWallet = wallets[1]   // Bob is always second\n *\n * // Access wallet details\n * console.log('Alice address:', aliceWallet.accounts[0].address)\n * console.log('Bob address:', bobWallet.accounts[0].address)\n *\n * // Disconnect all APIs when done\n * for (const wallet of wallets) {\n *   await wallet.api.disconnect()\n * }\n */\nconst mockWallets = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* (network = { networkId: network_1.defaultNetwork.id }, api, type) {\n    if (!type)\n        type = 'sr25519';\n    const wallets = [];\n    for (const uri of wallet_1.mockURIs) {\n        const wallet = yield (0, exports.activateWallet)(Object.assign(Object.assign({}, network), { uri,\n            api,\n            type }));\n        wallets.push(wallet);\n    }\n    return wallets;\n});\nexports.mockWallets = mockWallets;\n/**\n * Retrieves a specific mock wallet by name from a collection of mock wallets.\n *\n * This utility function provides easy access to specific development accounts\n * by name, making test code more readable and maintainable. It works with the\n * standard set of development account names.\n *\n * @param name - The name of the mock wallet to retrieve (e.g., 'Alice', 'Bob').\n * @param wallets - Array of WalletActivated objects from mockWallets().\n * @returns The WalletActivated object for the specified mock account.\n *\n * @example\n * import { mockWallets, getMockWallet } from '@autonomys/auto-utils'\n *\n * // Create mock wallets and get specific ones\n * const wallets = await mockWallets({ networkId: 'localhost' })\n *\n * const alice = getMockWallet('Alice', wallets)\n * const bob = getMockWallet('Bob', wallets)\n * const charlie = getMockWallet('Charlie', wallets)\n *\n * console.log('Alice address:', alice.accounts[0].address)\n * console.log('Bob address:', bob.accounts[0].address)\n * console.log('Charlie address:', charlie.accounts[0].address)\n *\n * // Use in tests\n * const sender = getMockWallet('Alice', wallets)\n * const receiver = getMockWallet('Bob', wallets)\n *\n * // Perform transfer from Alice to Bob\n * // ... transfer logic here ...\n *\n * // Available mock wallet names:\n * // 'Alice', 'Bob', 'Charlie', 'Dave', 'Eve', 'Frank', 'Grace', 'Harry', 'Ivy', 'Jacob'\n *\n * @throws {Error} When the specified name is not found in the available mock wallets.\n */\nconst getMockWallet = (name, wallets) => wallets[Object.values(wallet_1.mockURIs).indexOf(`//${name}`)];\nexports.getMockWallet = getMockWallet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@autonomys/auto-utils/dist/wallet.js\n");

/***/ })

};
;