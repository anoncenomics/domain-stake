name: Backfill Epochs
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      from:
        description: 'Start epoch (inclusive)'
        required: false
      to:
        description: 'End epoch (inclusive) or "current"'
        required: false
permissions:
  contents: write
concurrency:
  group: backfill-epochs
  cancel-in-progress: false
jobs:
  backfill:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci || npm i
      - name: Determine backfill range
        run: |
          FROM="${{ github.event.inputs.from }}"
          TO="${{ github.event.inputs.to }}"
          if [ -z "$FROM" ]; then
            FROM=$(node -e "const fs=require('fs'); let from=0; try{ const arr=JSON.parse(fs.readFileSync('public/data/epochs.json','utf8')); from=(Array.isArray(arr)&&arr.length)?(Number(arr[arr.length-1]?.epoch||0)+1):0; } catch(e){ from=0 } ; console.log(from)")
          fi
          if [ -z "$TO" ]; then
            TO="current"
          fi
          echo "FROM=$FROM" >> $GITHUB_ENV
          echo "TO=$TO" >> $GITHUB_ENV
      - run: node scripts/backfill-epochs.mjs --ws wss://rpc.mainnet.subspace.foundation/ws --domain 0 --from $FROM --to $TO --append
      - run: git config user.email "bot@users.noreply.github.com" && git config user.name "Backfill Bot"
      - run: |
          git add public/data/epochs.json
          git commit -m "chore: update epochs.json" || echo "no changes"
          git push


